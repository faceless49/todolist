{"version":3,"sources":["App.module.scss","components/ui/addItemForm/AddItemForm.tsx","components/ui/editableSpan/EditableSpan.tsx","components/todolist/Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","AddItemForm","props","useState","title","setTitle","error","setError","onClickHandler","callBack","trim","TextField","value","label","variant","size","onChange","e","currentTarget","onKeyPress","key","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","onEditMode","offEditMode","changeTitle","autoFocus","onBlur","onDoubleClick","className","Todolist","changeTodoListTitle","todolistID","removeTodoList","Delete","newTitle","addTask","style","listStyleType","paddingLeft","tasks","map","t","id","Checkbox","checked","isDone","changeTaskStatus","changeTaskTitle","removeTasks","Button","filter","changeTodoListFilter","App","todoListID_1","v1","todoListID_2","todoLists","setTodoLists","setTasks","tID","newIsDone","todoListID","tl","newTask","console","log","updatedTodoLists","todoListsComponents","tasksForTodolist","Grid","item","Paper","padding","elevation","s","AppBar","position","Toolbar","justifyContent","edge","aria-label","Menu","Typography","Container","fixed","container","newTodoListID","newTodoList","spacing","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.569344b6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__qSyM6\",\"error\":\"App_error__39ci2\",\"error-message\":\"App_error-message__2Kx3I\",\"is-done\":\"App_is-done__2uUJ4\"};","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\nimport {Button, IconButton, TextField} from '@material-ui/core';\nimport {AddBox} from '@material-ui/icons';\n\ntype inputType = {\n  callBack: (newTitle: string) => void\n}\n\nexport const AddItemForm = (props: inputType) => {\n    let [title, setTitle] = useState('')\n    let [error, setError] = useState<null | string>(null)\n\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n      setTitle(e.currentTarget.value)\n    }\n\n    const onClickHandler = () => {\n      if (title) {\n        props.callBack(title.trim())\n        setTitle('')\n        setError(null)\n      } else {\n        setError('Title is required')\n      }\n    }\n\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n      if (e.key === 'Enter') {\n        onClickHandler()\n      }\n    }\n\n    return (\n      <div>\n        <TextField\n          value={title}\n          label={'Title'}\n          variant={'outlined'}\n          size={'small'}\n          onChange={onChangeHandler}\n          onKeyPress={onKeyPressHandler}\n          error={!!error} // ! TODO: Use StyleComponent later for text required\n          helperText={error && error}\n        />\n\n        <IconButton\n          size={'small'}\n          color={'primary'}\n          onClick={onClickHandler}>\n          <AddBox/>\n        </IconButton>\n      </div>\n    );\n  }\n;\n\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\nimport s from './EditableSpan.module.scss'\nimport {TextField} from '@material-ui/core';\n\ntype EditableSpanPropsType = {\n  className?: string\n  title: string\n  changeTitle: (title: string) => void\n}\n\nexport const EditableSpan = (props: EditableSpanPropsType) => {\n\n  const [editMode, setEditMode] = useState<boolean>(false)\n  const [title, setTitle] = useState<string>(props.title)\n\n  const onEditMode = () => setEditMode(true)\n  const offEditMode = () => {\n    if (title) {\n      props.changeTitle(title)\n    }\n    setEditMode(!onEditMode)\n  }\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.currentTarget.value)\n  }\n  const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter') {\n      offEditMode()\n    }\n  }\n\n\n  return (\n    editMode\n      ?\n      <TextField\n        autoFocus\n        value={title}\n        onBlur={offEditMode}\n        onChange={onChangeHandler}\n        onKeyPress={onKeyPressHandler}\n      />\n      : <span\n        onDoubleClick={onEditMode}\n        className={props.className}>{props.title}</span>\n  );\n};\n\n","import React, {ChangeEvent} from 'react';\nimport {keyType} from '../../App';\n// import {Button} from '../ui/Button';\nimport {AddItemForm} from '../ui/addItemForm/AddItemForm';\nimport {EditableSpan} from '../ui/editableSpan/EditableSpan';\nimport s from '../ui/Button.module.scss';\nimport {Button, Checkbox, IconButton} from '@material-ui/core';\nimport {Delete} from '@material-ui/icons';\n\n\nexport type TaskType = {\n  id: string\n  title: string\n  isDone: boolean\n}\n\nexport type PropsType = {\n  todolistID: string\n  title: string\n  tasks: Array<TaskType>\n  filter: keyType\n  removeTasks: (id: string, todoListID: string) => void\n  changeTodoListFilter: (key: keyType, todoListID: string) => void\n  addTask: (newTitle: string, todoListID: string) => void\n  changeTaskStatus: (id: string, isDone: boolean, todoListID: string) => void\n  changeTaskTitle: (tID: string, title: string, todoListID: string) => void\n  removeTodoList: (todoListID: string) => void\n  changeTodoListTitle: (title: string, todoListID: string) => void\n}\n\nexport function Todolist(props: PropsType) {\n\n  // const onFilterClickHandler = (key: keyType) => {\n  //   return () => props.changeTodoListFilter(key, props.todolistID)\n  // for Custom Component }\n\n\n  const onClickRemoveTodoList = () => props.removeTodoList(props.todolistID)\n  const changeTodoListTitle = (title: string) => props.changeTodoListTitle(title, props.todolistID)\n\n  const onAllClickHandler = () => props.changeTodoListFilter('All', props.todolistID);\n  const onActiveClickHandler = () => props.changeTodoListFilter('Active', props.todolistID);\n  const onCompletedClickHandler = () => props.changeTodoListFilter('Completed', props.todolistID);\n\n\n  return <div>\n    <h3>\n      <EditableSpan\n        title={props.title}\n        changeTitle={changeTodoListTitle}/>\n      <IconButton\n        onClick={onClickRemoveTodoList}\n        size={'small'}\n        color={'primary'}\n      >\n        <Delete/>\n      </IconButton>\n    </h3>\n\n    <AddItemForm\n      callBack={(newTitle) =>\n        props.addTask(newTitle, props.todolistID)}/>\n\n    <ul style={{listStyleType: 'none', paddingLeft: '0'}}>\n      {props.tasks.map((t: TaskType) => {\n        const removeTasksHandler = () => {\n          props.removeTasks(t.id, props.todolistID)\n        }\n\n        const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => {\n          props.changeTaskStatus(t.id, e.currentTarget.checked, props.todolistID)\n        }\n        const changeTaskTitleHandler = (title: string) => {\n          props.changeTaskTitle(t.id, title, props.todolistID)\n        }\n\n        return (\n          <li key={t.id}>\n            <Checkbox\n              checked={t.isDone}\n              onChange={changeTaskStatus}\n            />\n\n            <EditableSpan\n              changeTitle={changeTaskTitleHandler}\n              className={t.isDone ? 'is-done' : ''}\n              title={t.title}/>\n\n            <IconButton\n              onClick={removeTasksHandler}\n              color={'primary'}\n              size={'small'}\n            >\n              <Delete/>\n            </IconButton>\n          </li>\n        )\n      })\n      }\n    </ul>\n    <div>\n\n      <Button\n        size={'small'}\n        variant={'contained'}\n        color={props.filter === 'All' ? 'secondary' : 'primary'}\n        onClick={onAllClickHandler}>All</Button>\n\n      <Button\n        size={'small'}\n        color={props.filter === 'Active' ? 'secondary' : 'primary'}\n        onClick={onActiveClickHandler}\n        variant={'contained'}\n      >Active</Button>\n\n      <Button\n        size={'small'}\n        color={props.filter === 'Completed' ? 'secondary' : 'primary'}\n        onClick={onCompletedClickHandler}\n        variant={'contained'}\n      >Completed</Button>\n    </div>\n  </div>\n}\n\n","import React, {useState} from 'react';\nimport s from './App.module.scss';\nimport {TaskType, Todolist} from './components/todolist/Todolist';\nimport {v1} from 'uuid';\nimport {AddItemForm} from './components/ui/addItemForm/AddItemForm';\nimport {AppBar, Button, Container, IconButton, Toolbar, Typography, Grid, Paper} from '@material-ui/core';\nimport {Menu} from '@material-ui/icons';\n\n\nexport type keyType = 'All' | 'Active' | 'Completed'\n\ntype TodoListType = {\n  id: string\n  title: string\n  filter: keyType\n}\n\ntype TaskStateType = {\n  [key: string]: Array<TaskType>\n}\n\nfunction App() {\n  const todoListID_1 = v1()\n  const todoListID_2 = v1()\n  const [todoLists, setTodoLists] = useState<Array<TodoListType>>([\n    {id: todoListID_1, title: 'What to Learn', filter: 'All'},\n    {id: todoListID_2, title: 'What to buy', filter: 'All'}\n  ])\n\n\n  const [tasks, setTasks] = useState<TaskStateType>({\n    [todoListID_1]: [\n      {id: v1(), title: 'HTML&CSS', isDone: true},\n      {id: v1(), title: 'JS', isDone: true},\n      {id: v1(), title: 'ReactJS', isDone: false},\n      {id: v1(), title: 'SASS', isDone: true}\n    ],\n    [todoListID_2]: [\n      {id: v1(), title: 'NASDAQ', isDone: false},\n      {id: v1(), title: 'Amazon', isDone: true},\n      {id: v1(), title: 'Facebook', isDone: false},\n      {id: v1(), title: 'NVIDIA', isDone: true},\n      {id: v1(), title: 'Tesla', isDone: true},\n    ]\n  })\n\n\n  // * Отправляем в 1 объект 2 массива\n  // let [tasks, setTasks] = useState<Array<TaskType>>([\n  //   {id: v1(), title: 'HTML&CSS', isDone: true},\n  //   {id: v1(), title: 'JS', isDone: true},\n  //   {id: v1(), title: 'ReactJS', isDone: false},\n  //   {id: v1(), title: 'SASS', isDone: true}\n  // ])\n\n  const changeTaskStatus = (tID: string, newIsDone: boolean, todoListID: string) => {\n\n    // ? const todoListTasks = tasks[todoListID]\n\n    tasks[todoListID] = tasks[todoListID].map(t => {\n      if (t.id === tID) {\n        return {...t, isDone: newIsDone}\n      }\n      return t\n    })\n    setTasks({...tasks});\n\n    // let currentTask = tasks.find(t => t.id === id)\n    // if (currentTask) {\n    //   currentTask.isDone = newIsDone\n    //   // * 2 variant\n    //   // * currentTask.isDone = !currentTask.isDone\n    //   setTasks([...tasks]);\n    // }\n  }\n\n  const changeTaskTitle = (tID: string, title: string, todoListID: string) => {\n\n\n    tasks[todoListID] = tasks[todoListID].map(t => {\n      if (t.id === tID) {\n        return {...t, title: title}\n      }\n      return t\n    })\n    setTasks({...tasks});\n  }\n  const changeTodoListFilter = (key: keyType, todoListID: string) => {\n    setTodoLists(todoLists.map(tl => tl.id === todoListID ? {...tl, filter: key} : tl))\n  }\n  const addTask = (newTitle: string, todoListID: string) => {\n    const newTask = {id: v1(), title: newTitle, isDone: false};\n    tasks[todoListID] = [newTask, ...tasks[todoListID]]\n    setTasks({...tasks})\n  }\n  const removeTasks = (tID: string, todoListID: string) => {\n    console.log(tasks)\n    tasks[todoListID] = tasks[todoListID].filter(t => t.id !== tID)\n    setTasks({...tasks})\n  }\n  const removeTodoList = (todoListID: string) => {\n    setTodoLists(todoLists.filter(tl => tl.id !== todoListID))\n    delete tasks[todoListID]\n  }\n  const addTodoList = (title: string) => {\n    const newTodoListID = v1()\n    const newTodoList: TodoListType = {\n      id: newTodoListID,\n      title: title,\n      filter: 'All'\n    }\n    setTodoLists([...todoLists, newTodoList])\n    setTasks({...tasks, [newTodoListID]: []})\n  }\n\n  const changeTodoListTitle = (title: string, todoListID: string) => {\n    const updatedTodoLists = todoLists.map(tl => {\n      if (tl.id === todoListID) {\n        return {...tl, title: title}\n      }\n      return tl\n    })\n    setTodoLists(updatedTodoLists)\n  }\n\n\n  const todoListsComponents = todoLists.map(tl => {\n    let tasksForTodolist = tasks[tl.id]\n\n    if (tl.filter === 'Active') {\n      tasksForTodolist = tasks[tl.id].filter(t => !t.isDone)\n    }\n    if (tl.filter === 'Completed') {\n      tasksForTodolist = tasks[tl.id].filter(t => t.isDone)\n    }\n\n    return (\n      <Grid\n        item\n        key={tl.id}>\n        <Paper\n          style={{padding: '10px'}}\n          elevation={5}>\n          <Todolist\n            todolistID={tl.id}\n            title={tl.title}\n            tasks={tasksForTodolist}\n            removeTasks={removeTasks}\n            addTask={addTask}\n            changeTodoListFilter={changeTodoListFilter}\n            changeTaskStatus={changeTaskStatus}\n            removeTodoList={removeTodoList}\n            filter={tl.filter}\n            changeTaskTitle={changeTaskTitle}\n            changeTodoListTitle={changeTodoListTitle}\n          />\n        </Paper>\n      </Grid>\n    )\n  })\n\n  return (\n    <div className={s.App}>\n      <AppBar position=\"static\">\n        <Toolbar style={{justifyContent: 'space-between'}}>\n          <IconButton\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"menu\">\n            <Menu/>\n          </IconButton>\n          <Typography variant=\"h6\">\n            Todolists\n          </Typography>\n          <Button color=\"inherit\">Login</Button>\n        </Toolbar>\n      </AppBar>\n      <Container fixed>\n        <Grid\n          container\n          style={{padding: '20px 20px'}}>\n          <AddItemForm callBack={addTodoList}/>\n        </Grid>\n        <Grid\n          container\n          spacing={5}>\n          {todoListsComponents}\n        </Grid>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}