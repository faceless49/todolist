{"version":3,"sources":["features/TodolistsList/Todolist/Task/Task.module.scss","app/App.module.scss","features/TodolistsList/todolistsReducer.ts","api/apiConfig/index.ts","api/todolist-api.ts","features/CommonActions/AppCommonActions.ts","utils/error-utils.ts","features/Login/auth-reducer.tsx","features/Login/selectors.ts","utils/redux-utils.ts","features/TodolistsList/taskReducer.ts","features/Login/Login.tsx","features/Login/index.ts","api/types.ts","components/ui/addItemForm/AddItemForm.tsx","components/ui/editableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","features/TodolistsList/index.ts","features/Application/selectors.ts","features/Application/application-reducer.ts","features/Application/index.ts","app/store.ts","components/ui/ErrorSnackbar/ErrorSnackbar.tsx","app/App.tsx","index.tsx"],"names":["module","exports","ResponseStatusCodes","instance","axios","create","baseURL","withCredentials","headers","todolistApi","get","title","post","todolistId","delete","put","taskId","model","authAPI","data","setAppStatus","createAction","appActions","setAppError","handleAsyncServerAppError","thunkAPI","showError","dispatch","error","messages","length","status","rejectWithValue","errors","fieldsErrors","handleAsyncServerNetworkError","message","undefined","fetchTodolists","createAsyncThunk","param","a","res","todolists","AxiosError","removeTodolist","changeTodolistEntityStatus","entityStatus","addTodolist","resultCode","success","todolist","item","changeTodolistTitle","asyncActions","slice","createSlice","name","initialState","reducers","changeTodolistFilter","state","action","index","findIndex","tl","id","payload","filter","key","clearTodosData","extraReducers","builder","addCase","fulfilled","map","splice","unshift","actions","login","logout","isLoggedIn","setIsLoggedInAC","selectIsLoggedIn","auth","useAppDispatch","useDispatch","useActions","useMemo","bindActionCreators","useAppSelector","useSelector","Login","navigate","useNavigate","formik","useFormik","initialValues","email","password","rememberMe","validate","values","test","onSubmit","formikHelpers","authActions","rejected","match","setFieldError","field","Grid","container","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","TextField","label","margin","getFieldProps","touched","style","color","type","FormControlLabel","control","Checkbox","onChange","handleChange","value","checked","Button","variant","authReducer","reducer","TaskStatuses","TaskPriorities","fetchTasks","tasks","items","removeTask","addTask","updateTask","getState","tasksForCurrentTodolist","task","find","t","apiModel","deadline","description","priority","startDate","domainModel","asyncTodolistsActions","forEach","todoListId","AddItemForm","React","memo","props","useState","setTitle","setError","addItemHandler","trim","addItem","size","e","currentTarget","onKeyPress","helperText","disabled","IconButton","onClick","AddBox","EditableSpan","editMode","setEditMode","activateEditMode","offEditMode","changeTitle","useCallback","autoFocus","onBlur","onDoubleClick","className","Task","tasksActions","removeTasksHandler","changeTaskStatusHandler","newIsDoneValue","Completed","New","changeTaskTitleHandler","styles","isDone","Delete","Todolist","todolistsActions","changeTodoListTitle","onFilterButtonClickHandler","addTaskCallback","helpers","thunk","resultAction","errorMessage","allTodolistTasks","renderFilterButton","buttonFilter","text","listStyleType","paddingLeft","TodolistsList","addTodolistCallback","useEffect","padding","spacing","Paper","elevation","to","todolistsAsyncActions","todolistsSlice","tasksAsyncActions","todolistsReducer","tasksReducer","tasksSlice","selectStatus","app","selectIsInitialized","isInitialized","initializeApp","appReducer","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","Alert","forwardRef","ref","ErrorSnackbar","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","sx","width","App","appSelectors","authSelectors","AppBar","position","Toolbar","edge","Typography","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.52dd86c1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"isDone\":\"Task_isDone__KWXmu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__28txn\",\"error\":\"App_error__k9UEP\",\"error-message\":\"App_error-message__1Qm0Y\",\"is-done\":\"App_is-done__3n4nj\"};","import { todolistApi } from \"../../api/todolist-api\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport {\n  handleAsyncServerAppError,\n  handleAsyncServerNetworkError,\n} from \"../../utils/error-utils\";\nimport { AppRootStateType, ThunkError } from \"../../utils/types\";\nimport { TodolistType } from \"../../api/types\";\nimport { RequestStatusType } from \"../Application\";\nimport { appActions } from \"../CommonActions/AppCommonActions\";\nimport { AxiosError } from \"axios\";\n\nexport enum ResponseStatusCodes {\n  success = 0,\n  error = 1,\n  captcha = 10,\n}\n\nconst { setAppStatus } = appActions;\n\nconst fetchTodolists = createAsyncThunk<\n  { todolists: TodolistType[] },\n  undefined,\n  ThunkError\n>(\"todolist/fetchTodolists\", async (param, thunkAPI) => {\n  thunkAPI.dispatch(setAppStatus({ status: \"loading\" }));\n  try {\n    const res = await todolistApi.getTodolists();\n    thunkAPI.dispatch(setAppStatus({ status: \"succeeded\" }));\n    return { todolists: res.data };\n  } catch (error) {\n    if (error instanceof AxiosError)\n      return handleAsyncServerNetworkError(error, thunkAPI);\n  }\n});\nconst removeTodolist = createAsyncThunk<\n  { todolistId: string },\n  { todolistId: string },\n  ThunkError\n>(\n  \"todolist/removeTodolist\",\n  async (param: { todolistId: string }, thunkAPI) => {\n    thunkAPI.dispatch(setAppStatus({ status: \"loading\" }));\n    thunkAPI.dispatch(\n      changeTodolistEntityStatus({\n        todolistId: param.todolistId,\n        entityStatus: \"loading\",\n      })\n    );\n    try {\n      const res = await todolistApi.deleteTodolist(param.todolistId);\n      thunkAPI.dispatch(setAppStatus({ status: \"succeeded\" }));\n      return { todolistId: param.todolistId };\n    } catch (error) {\n      if (error instanceof AxiosError)\n        return handleAsyncServerNetworkError(error, thunkAPI);\n    }\n  }\n);\nconst addTodolist = createAsyncThunk<\n  { todolist: TodolistType },\n  string,\n  ThunkError\n>(\"todolist/addTodolist\", async (title, thunkAPI) => {\n  thunkAPI.dispatch(setAppStatus({ status: \"loading\" }));\n  try {\n    const res = await todolistApi.createTodo(title);\n    if (res.data.resultCode === ResponseStatusCodes.success) {\n      thunkAPI.dispatch(setAppStatus({ status: \"succeeded\" }));\n      return { todolist: res.data.data.item };\n    } else {\n      return handleAsyncServerAppError(res.data, thunkAPI, false);\n    }\n  } catch (error) {\n    if (error instanceof AxiosError)\n      return handleAsyncServerNetworkError(error, thunkAPI, false);\n  }\n});\nconst changeTodolistTitle = createAsyncThunk(\n  \"todolist/changeTodolistTitle\",\n  async (\n    param: {\n      title: string;\n      todolistId: string;\n    },\n    thunkAPI\n  ) => {\n    thunkAPI.dispatch(setAppStatus({ status: \"loading\" }));\n    try {\n      const res = await todolistApi.updateTodolistTitle(\n        param.todolistId,\n        param.title\n      );\n      if (res.data.resultCode === ResponseStatusCodes.success) {\n        thunkAPI.dispatch(setAppStatus({ status: \"succeeded\" }));\n        return { todolistId: param.todolistId, title: param.title };\n      } else {\n        return handleAsyncServerAppError(res.data, thunkAPI, false);\n      }\n    } catch (error) {\n      if (error instanceof AxiosError)\n        return handleAsyncServerNetworkError(error, thunkAPI, false);\n    }\n  }\n);\n\nexport const asyncActions = {\n  fetchTodolists,\n  addTodolist,\n  removeTodolist,\n  changeTodolistTitle,\n};\n\nexport const slice = createSlice({\n  name: \"todolist\",\n  initialState: [] as TodolistDomainType[],\n  reducers: {\n    changeTodolistFilter: (\n      state,\n      action: PayloadAction<{ key: FilterValueType; todolistId: string }>\n    ) => {\n      const index = state.findIndex(\n        (tl) => tl.id === action.payload.todolistId\n      );\n      state[index].filter = action.payload.key;\n    },\n    changeTodolistEntityStatus: (\n      state,\n      action: PayloadAction<{\n        todolistId: string;\n        entityStatus: RequestStatusType;\n      }>\n    ) => {\n      const index = state.findIndex(\n        (tl) => tl.id === action.payload.todolistId\n      );\n      state[index].entityStatus = action.payload.entityStatus;\n    },\n    clearTodosData: () => {\n      return [];\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchTodolists.fulfilled, (state, action) => {\n        return action.payload.todolists.map((tl) => ({\n          ...tl,\n          filter: \"All\",\n          entityStatus: \"idle\",\n        }));\n      })\n      .addCase(removeTodolist.fulfilled, (state, action) => {\n        const index = state.findIndex(\n          (tl) => tl.id === action.payload.todolistId\n        );\n        if (index > -1) {\n          state.splice(index, 1);\n        }\n      })\n      .addCase(addTodolist.fulfilled, (state, action) => {\n        state.unshift({\n          ...action.payload.todolist,\n          filter: \"All\",\n          entityStatus: \"idle\",\n        });\n      })\n      .addCase(changeTodolistTitle.fulfilled, (state, action) => {\n        const index = state.findIndex(\n          (tl) => tl.id === action.payload.todolistId\n        );\n        state[index].title = action.payload.title;\n      });\n  },\n});\n\nexport const {\n  changeTodolistFilter,\n  changeTodolistEntityStatus,\n  clearTodosData,\n} = slice.actions;\n\n// ** ===== THUNKS\n\nexport type ThunkType = ThunkAction<\n  void,\n  AppRootStateType,\n  unknown,\n  ActionsType\n>;\n\n// * types\n\nexport type ChangeTodolistEntityStatusActionType = ReturnType<\n  typeof changeTodolistEntityStatus\n>;\n\nexport type FilterValueType = \"All\" | \"Active\" | \"Completed\";\n\nexport type TodolistDomainType = TodolistType & {\n  filter: FilterValueType;\n  entityStatus: RequestStatusType;\n};\nexport type ActionsType =\n  | ReturnType<typeof changeTodolistFilter>\n  | ChangeTodolistEntityStatusActionType\n  | ReturnType<typeof clearTodosData>\n  | ReturnType<typeof setAppStatus>;\n","import axios from \"axios\";\n\nexport const instance = axios.create({\n  baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\n  withCredentials: true,\n  headers: {\n    \"API-KEY\": \"db8d2f12-200b-4467-ba1f-cd791df3f39c\",\n  },\n});\n","import { AxiosResponse } from \"axios\";\nimport { TodolistDomainType } from \"../features/TodolistsList/todolistsReducer\";\nimport {\n  GetTasksResponse,\n  LoginParamsType,\n  MeResponseType,\n  ResponseType,\n  TaskType,\n  TodolistType,\n  UpdateTaskModelType,\n} from \"./types\";\nimport { instance } from \"./apiConfig\";\n\n// api\nexport const todolistApi = {\n  //* Todolist\n  getTodolists() {\n    return instance.get<Array<TodolistDomainType>>(\"todo-lists\");\n  },\n  createTodo(title: string) {\n    return instance.post<ResponseType<{ item: TodolistType }>>(\"todo-lists\", {\n      title: title,\n    });\n  },\n  deleteTodolist(todolistId: string) {\n    return instance.delete<ResponseType>(`todo-lists/${todolistId}`);\n  },\n  updateTodolistTitle(todolistId: string, title: string) {\n    return instance.put<ResponseType>(`todo-lists/${todolistId}`, {\n      title,\n    });\n  },\n\n  //* Tasks\n  getTasks(todolistId: string) {\n    return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\n  },\n  createTask(todolistId: string, title: string) {\n    return instance.post<\n      { title: string },\n      { data: ResponseType<{ item: TaskType }> }\n    >(`todo-lists/${todolistId}/tasks`, {\n      title,\n    });\n  },\n  deleteTask(todolistId: string, taskId: string) {\n    return instance.delete<ResponseType>(\n      `/todo-lists/${todolistId}/tasks/${taskId}`\n    );\n  },\n  updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\n    return instance.put<\n      UpdateTaskModelType,\n      AxiosResponse<ResponseType<{ item: TaskType }>>\n    >(`/todo-lists/${todolistId}/tasks/${taskId}`, model);\n  },\n};\n\n// * Auth\n\nexport const authAPI = {\n  login(data: LoginParamsType) {\n    return instance.post<\n      LoginParamsType,\n      AxiosResponse<ResponseType<{ userId: number }>>\n    >(\"/auth/login\", data);\n  },\n  me() {\n    return instance.get<ResponseType<MeResponseType>>(\"/auth/me\");\n  },\n  logout() {\n    return instance.delete<ResponseType>(\"auth/login\");\n  },\n};\n","import { createAction } from \"@reduxjs/toolkit\";\nimport { RequestStatusType } from \"../Application/application-reducer\";\n\nconst setAppStatus = createAction<{ status: RequestStatusType }>(\n  \"application/setAppStatus\"\n);\nconst setAppError = createAction<{ error: string | null }>(\n  \"application/setAppError\"\n);\n\nexport const appActions = {\n  setAppError,\n  setAppStatus,\n};\n","import { ResponseType } from \"../api/types\";\nimport { appActions } from \"../features/CommonActions/AppCommonActions\";\nimport { AxiosError } from \"axios\";\n\nexport const handleAsyncServerAppError = <D>(\n  data: ResponseType<D>,\n  thunkAPI: ThunkAPIType,\n  showError = true\n) => {\n  if (showError) {\n    thunkAPI.dispatch(\n      appActions.setAppError({\n        error: data.messages.length ? data.messages[0] : \"Some error occurred\",\n      })\n    );\n  }\n  thunkAPI.dispatch(appActions.setAppStatus({ status: \"failed\" }));\n  return thunkAPI.rejectWithValue({\n    errors: data.messages,\n    fieldsErrors: data.fieldsErrors,\n  });\n};\nexport const handleAsyncServerNetworkError = (\n  error: AxiosError,\n  thunkAPI: ThunkAPIType,\n  showError = true\n) => {\n  if (showError) {\n    thunkAPI.dispatch(\n      appActions.setAppError({\n        error: error.message ? error.message : \"Some error occurred\",\n      })\n    );\n  }\n  thunkAPI.dispatch(appActions.setAppStatus({ status: \"failed\" }));\n\n  return thunkAPI.rejectWithValue({\n    errors: [error.message],\n    fieldsErrors: undefined,\n  });\n};\n\ntype ThunkAPIType = {\n  dispatch: (action: any) => void;\n  rejectWithValue: Function;\n};\n","import { authAPI } from \"../../api/todolist-api\";\nimport { clearTodosData } from \"../TodolistsList/todolistsReducer\";\nimport { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { FieldErrorType, LoginParamsType } from \"../../api/types\";\nimport {\n  handleAsyncServerAppError,\n  handleAsyncServerNetworkError,\n} from \"../../utils/error-utils\";\nimport { appActions } from \"../CommonActions/AppCommonActions\";\nimport { AxiosError } from \"axios\";\n\nenum ResponseStatusCodes {\n  success = 0,\n  error = 1,\n  captcha = 10,\n}\n\nexport const login = createAsyncThunk<\n  undefined,\n  LoginParamsType,\n  {\n    rejectValue: {\n      errors: Array<string>;\n      fieldsErrors?: Array<FieldErrorType>;\n    };\n  }\n>(\"auth/login\", async (param: LoginParamsType, thunkAPI) => {\n  thunkAPI.dispatch(appActions.setAppStatus({ status: \"loading\" }));\n  try {\n    const res = await authAPI.login(param);\n    if (res.data.resultCode === ResponseStatusCodes.success) {\n      thunkAPI.dispatch(appActions.setAppStatus({ status: \"succeeded\" }));\n      return;\n    } else {\n      return handleAsyncServerAppError(res.data, thunkAPI);\n    }\n  } catch (error) {\n    if (error instanceof AxiosError)\n      return handleAsyncServerNetworkError(error, thunkAPI);\n  }\n});\n\nexport const logout = createAsyncThunk(\n  \"auth/logout\",\n  async (param, thunkAPI) => {\n    thunkAPI.dispatch(appActions.setAppStatus({ status: \"loading\" }));\n    try {\n      const res = await authAPI.logout();\n      if (res.data.resultCode === ResponseStatusCodes.success) {\n        thunkAPI.dispatch(appActions.setAppStatus({ status: \"succeeded\" }));\n        thunkAPI.dispatch(clearTodosData());\n        return;\n      } else {\n        return handleAsyncServerAppError(res.data, thunkAPI);\n      }\n    } catch (error) {\n      if (error instanceof AxiosError)\n        return handleAsyncServerNetworkError(error, thunkAPI);\n    }\n  }\n);\n\nexport const asyncActions = {\n  login,\n  logout,\n};\n\nexport const slice = createSlice({\n  name: \"auth\",\n  initialState: {\n    isLoggedIn: false,\n  },\n  reducers: {\n    setIsLoggedInAC(state, action: PayloadAction<{ isLoggedIn: boolean }>) {\n      state.isLoggedIn = action.payload.isLoggedIn;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(login.fulfilled, (state) => {\n        state.isLoggedIn = true;\n      })\n      .addCase(logout.fulfilled, (state) => {\n        state.isLoggedIn = false;\n      });\n  },\n});\n","import { AppRootStateType } from \"../../utils/types\";\n\nexport const selectIsLoggedIn = (state: AppRootStateType) =>\n  state.auth.isLoggedIn;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport { ActionCreatorsMapObject, bindActionCreators } from \"redux\";\nimport { useMemo } from \"react\";\nimport { AppDispatchType, AppRootStateType } from \"./types\";\n\nexport const useAppDispatch = () => useDispatch<AppDispatchType>();\n\nexport function useActions<T extends ActionCreatorsMapObject<any>>(actions: T) {\n  const dispatch = useAppDispatch();\n  const boundActions = useMemo(() => {\n    return bindActionCreators(actions, dispatch);\n  }, []);\n  return boundActions;\n}\n\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector;\n","import { todolistApi } from \"../../api/todolist-api\";\nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport {\n  handleAsyncServerAppError,\n  handleAsyncServerNetworkError,\n} from \"../../utils/error-utils\";\nimport { asyncActions as asyncTodolistsActions } from \"./todolistsReducer\";\nimport { TaskStateType } from \"../../app/App\";\nimport { AppRootStateType, ThunkError } from \"../../utils/types\";\nimport {\n  TaskPriorities,\n  TaskStatuses,\n  TaskType,\n  UpdateTaskModelType,\n} from \"../../api/types\";\nimport { appActions } from \"../CommonActions/AppCommonActions\";\nimport { AxiosError } from \"axios\";\n\nconst initialState: TaskStateType = {};\n\nenum ResponseStatusCodes {\n  success = 0,\n  error = 1,\n  captcha = 10,\n}\n\nexport const fetchTasks = createAsyncThunk<\n  { tasks: TaskType[]; todolistId: string },\n  string,\n  ThunkError\n>(\"task/fetchTasksTC\", async (todolistId, thunkAPI) => {\n  thunkAPI.dispatch(appActions.setAppStatus({ status: \"loading\" }));\n  try {\n    const res = await todolistApi.getTasks(todolistId);\n    const tasks = res.data.items;\n    thunkAPI.dispatch(appActions.setAppStatus({ status: \"succeeded\" }));\n    return { tasks, todolistId };\n  } catch (error) {\n    if (error instanceof AxiosError)\n      return handleAsyncServerNetworkError(error, thunkAPI);\n  }\n});\nexport const removeTask = createAsyncThunk<\n  { taskId: string; todolistId: string },\n  { taskId: string; todolistId: string },\n  ThunkError\n>(\"task/removeTaskTC\", async (param, thunkAPI) => {\n  thunkAPI.dispatch(appActions.setAppStatus({ status: \"loading\" }));\n  try {\n    const res = await todolistApi.deleteTask(param.todolistId, param.taskId);\n    return { taskId: param.taskId, todolistId: param.todolistId };\n  } catch (error) {\n    if (error instanceof AxiosError)\n      return handleAsyncServerNetworkError(error, thunkAPI);\n  }\n});\n\nexport const addTask = createAsyncThunk<\n  TaskType,\n  { title: string; todolistId: string },\n  ThunkError\n>(\"task/addTaskTC\", async (param, thunkAPI) => {\n  thunkAPI.dispatch(appActions.setAppStatus({ status: \"loading\" }));\n  try {\n    const res = await todolistApi.createTask(param.todolistId, param.title);\n    if (res.data.resultCode === ResponseStatusCodes.success) {\n      thunkAPI.dispatch(appActions.setAppStatus({ status: \"succeeded\" }));\n      return res.data.data.item;\n    } else {\n      handleAsyncServerAppError(res.data, thunkAPI, false);\n      return thunkAPI.rejectWithValue({\n        errors: res.data.messages,\n        fieldsErrors: res.data.fieldsErrors,\n      });\n    }\n  } catch (error) {\n    if (error instanceof AxiosError)\n      return handleAsyncServerNetworkError(error, thunkAPI, false);\n  }\n});\nexport const updateTask = createAsyncThunk(\n  \"task/updateTaskTC\",\n  async (\n    param: {\n      taskId: string;\n      todolistId: string;\n      domainModel: UpdateDomainModelTaskType;\n    },\n    thunkAPI\n  ) => {\n    const state = thunkAPI.getState() as AppRootStateType;\n    const tasksForCurrentTodolist = state.tasks[param.todolistId];\n    const task = tasksForCurrentTodolist.find((t) => {\n      return t.id === param.taskId;\n    });\n\n    if (!task) {\n      return thunkAPI.rejectWithValue(\"task not found in the state\");\n    }\n    const apiModel: UpdateTaskModelType = {\n      deadline: task.deadline,\n      description: task.description,\n      priority: task.priority,\n      startDate: task.startDate,\n      title: task.title,\n      status: task.status,\n      ...param.domainModel,\n    };\n    thunkAPI.dispatch(appActions.setAppStatus({ status: \"loading\" }));\n    const res = await todolistApi.updateTask(\n      param.todolistId,\n      param.taskId,\n      apiModel\n    );\n    try {\n      if (res.data.resultCode === ResponseStatusCodes.success) {\n        thunkAPI.dispatch(appActions.setAppStatus({ status: \"succeeded\" }));\n        return param;\n      } else {\n        return handleAsyncServerAppError(res.data, thunkAPI);\n      }\n    } catch (error) {\n      if (error instanceof AxiosError)\n        return handleAsyncServerNetworkError(error, thunkAPI);\n    }\n  }\n);\n\nexport const asyncActions = {\n  fetchTasks,\n  removeTask,\n  addTask,\n  updateTask,\n};\n\nexport const slice = createSlice({\n  name: \"task\",\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(asyncTodolistsActions.addTodolist.fulfilled, (state, action) => {\n        state[action.payload.todolist.id] = [];\n      })\n      .addCase(\n        asyncTodolistsActions.removeTodolist.fulfilled,\n        (state, action) => {\n          delete state[action.payload.todolistId];\n        }\n      )\n      .addCase(\n        asyncTodolistsActions.fetchTodolists.fulfilled,\n        (state, action) => {\n          action.payload.todolists.forEach((tl) => {\n            state[tl.id] = [];\n          });\n        }\n      )\n      .addCase(fetchTasks.fulfilled, (state, action) => {\n        state[action.payload.todolistId] = action.payload.tasks;\n      })\n      .addCase(removeTask.fulfilled, (state, action) => {\n        const tasks = state[action.payload.todolistId];\n        const index = tasks.findIndex((t) => t.id === action.payload.taskId);\n        if (index > -1) {\n          tasks.splice(index, 1);\n        }\n      })\n      .addCase(addTask.fulfilled, (state, action) => {\n        state[action.payload.todoListId].unshift(action.payload);\n      })\n      .addCase(updateTask.fulfilled, (state, action) => {\n        const task = state[action.payload.todolistId];\n        const index = task.findIndex((t) => t.id === action.payload.taskId);\n        if (index > -1) {\n          task[index] = { ...task[index], ...action.payload.domainModel };\n        }\n      });\n  },\n});\n\n// types\nexport type UpdateDomainModelTaskType = {\n  title?: string;\n  description?: string;\n  status?: TaskStatuses;\n  priority?: TaskPriorities;\n  startDate?: string;\n  deadline?: string;\n};\n","import React from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport FormControl from \"@mui/material/FormControl\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport FormGroup from \"@mui/material/FormGroup\";\nimport FormLabel from \"@mui/material/FormLabel\";\nimport TextField from \"@mui/material/TextField\";\nimport Button from \"@mui/material/Button\";\nimport { FormikHelpers, useFormik } from \"formik\";\nimport { useSelector } from \"react-redux\";\nimport { login } from \"./auth-reducer\";\nimport { useNavigate } from \"react-router-dom\";\nimport { selectIsLoggedIn } from \"./selectors\";\nimport { authActions } from \"./index\";\nimport { useAppDispatch } from \"../../utils/redux-utils\";\nimport { FormikErrorType } from \"../../api/types\";\n\ntype FormValuesType = {\n  email: string;\n  password: string;\n  rememberMe: boolean;\n};\n\nexport const Login = () => {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate(); // * Test hook\n\n  const isLoggedIn = useSelector(selectIsLoggedIn);\n\n  const formik = useFormik({\n    initialValues: {\n      email: \"\",\n      password: \"\",\n      rememberMe: false,\n    },\n    validate: (values) => {\n      const errors: Partial<FormikErrorType> = {};\n      if (!values.email) {\n        errors.email = \"Required\";\n      } else if (\n        !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n      ) {\n        errors.email = \"Invalid email address\";\n      }\n      return errors;\n    },\n    onSubmit: async (values, formikHelpers: FormikHelpers<FormValuesType>) => {\n      const action = await dispatch(authActions.login(values));\n      if (login.rejected.match(action)) {\n        if (action.payload?.fieldsErrors?.length) {\n          const error = action.payload.fieldsErrors[0];\n          formikHelpers.setFieldError(error.field, error.error);\n        }\n      }\n    },\n  });\n\n  if (isLoggedIn) navigate(\"/\");\n\n  return (\n    <Grid container justifyContent={\"center\"}>\n      <Grid item justifyContent={\"center\"}>\n        <form onSubmit={formik.handleSubmit}>\n          <FormControl>\n            <FormLabel>\n              <p>\n                To log in get registered\n                <a\n                  href={\"https://social-network.samuraijs.com/\"}\n                  target={\"_blank\"}\n                >\n                  here\n                </a>\n              </p>\n              <p>or use common test account credentials:</p>\n              <p>Email: free@samuraijs.com</p>\n              <p>Password: free</p>\n            </FormLabel>\n            <FormGroup>\n              <TextField\n                label=\"Email\"\n                margin=\"normal\"\n                {...formik.getFieldProps(\"email\")}\n              />\n\n              {formik.touched.email && formik.errors.email && (\n                <div style={{ color: \"red\" }}>{formik.errors.email}</div>\n              )}\n              <TextField\n                type=\"password\"\n                label=\"Password\"\n                margin=\"normal\"\n                {...formik.getFieldProps(\"password\")}\n              />\n              {formik.touched.password && formik.errors.password ? (\n                <div style={{ color: \"red\" }}>{formik.errors.password}</div>\n              ) : null}\n              <FormControlLabel\n                label={\"Remember me\"}\n                control={<Checkbox />}\n                name=\"rememberMe\"\n                onChange={formik.handleChange}\n                value={\"rememberMe\"}\n                checked={formik.values.rememberMe}\n              />\n              <Button type={\"submit\"} variant={\"contained\"} color={\"primary\"}>\n                Login\n              </Button>\n            </FormGroup>\n          </FormControl>\n        </form>\n      </Grid>\n    </Grid>\n  );\n};\n","import { Login } from \"./Login\";\nimport * as authSelectors from \"./selectors\";\nimport { asyncActions, slice } from \"./auth-reducer\";\n\nconst authActions = {\n  ...asyncActions,\n  ...slice.actions,\n};\n\nconst authReducer = slice.reducer;\n\nexport { authSelectors, Login, authActions, authReducer };\n","// types\nexport type FormikErrorType = {\n  email: string;\n  password: string;\n  rememberMe: boolean;\n};\nexport type MeResponseType = {\n  id: number;\n  email: string;\n  login: string;\n};\n\nexport type ResponseType<D = {}> = {\n  resultCode: number;\n  messages: Array<string>;\n  fieldsErrors?: Array<FieldErrorType>;\n  data: D;\n};\nexport type TodolistType = {\n  id: string;\n  title: string;\n  addedDate: string;\n  order: number;\n};\n\nexport enum TaskStatuses {\n  New = 0,\n  InProgress = 1,\n  Completed = 2,\n  Draft = 3,\n}\n\nexport enum TaskPriorities {\n  Low = 0,\n  Middle = 1,\n  Hi = 2,\n  Urgently = 3,\n  Later = 4,\n}\n\nexport type TaskType = {\n  description: string;\n  title: string;\n  status: TaskStatuses;\n  priority: TaskPriorities;\n  startDate: string;\n  deadline: string;\n  id: string;\n  todoListId: string;\n  order: number;\n  addedDate: string;\n};\nexport type GetTasksResponse = {\n  error: string | null;\n  totalCount: number;\n  items: Array<TaskType>;\n};\nexport type FieldErrorType = { field: string; error: string };\n\nexport type UpdateTaskModelType = {\n  title: string;\n  description: string;\n  status: TaskStatuses;\n  priority: TaskPriorities;\n  startDate: string;\n  deadline: string;\n};\nexport type LoginParamsType = FormikErrorType & {\n  captcha?: string;\n};\nexport type LoginResponseType = {\n  resultCode: number;\n  messages: Array<string>;\n  data: {\n    userId: number;\n  };\n};\n","import React, { ChangeEvent, KeyboardEvent, useState } from \"react\";\nimport { IconButton, TextField } from \"@mui/material\";\nimport { AddBox } from \"@mui/icons-material\";\n\nexport type AddItemFormSubmitHelperType = {\n  setError: (error: string) => void;\n  setTitle: (title: string) => void;\n};\ntype AddItemFormPropsType = {\n  addItem: (newTitle: string, helpers: AddItemFormSubmitHelperType) => void;\n  disabled?: boolean;\n};\n\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\n  let [title, setTitle] = useState(\"\");\n  let [error, setError] = useState<null | string>(null);\n\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.currentTarget.value);\n  };\n\n  const addItemHandler = async () => {\n    if (title.trim() !== \"\") {\n      props.addItem(title, { setError, setTitle });\n    } else {\n      setError(\"Title is required\");\n    }\n  };\n\n  const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (error !== null) {\n      setError(null);\n    }\n    if (e.key === \"Enter\") {\n      addItemHandler();\n    }\n  };\n\n  return (\n    <div>\n      <TextField\n        value={title}\n        label={\"Title\"}\n        variant={\"outlined\"}\n        size={\"small\"}\n        onChange={onChangeHandler}\n        onKeyPress={onKeyPressHandler}\n        error={!!error}\n        helperText={error}\n        disabled={props.disabled}\n      />\n      <IconButton\n        size={\"small\"}\n        color={\"primary\"}\n        onClick={addItemHandler}\n        disabled={props.disabled}\n      >\n        <AddBox />\n      </IconButton>\n    </div>\n  );\n});\n","import React, {\n  ChangeEvent,\n  KeyboardEvent,\n  useCallback,\n  useState,\n} from \"react\";\nimport s from \"./EditableSpan.module.scss\";\nimport { TextField } from \"@mui/material\";\n\ntype EditableSpanPropsType = {\n  className?: string;\n  title: string;\n  changeTitle: (title: string) => void;\n};\n\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\n  const [editMode, setEditMode] = useState<boolean>(false);\n  const [title, setTitle] = useState<string>(props.title);\n\n  const activateEditMode = () => {\n    setEditMode(true);\n    setTitle(props.title);\n  };\n  const offEditMode = () => {\n    if (title) {\n      props.changeTitle(title);\n    }\n    setEditMode(!activateEditMode);\n  };\n\n  const changeTitle = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.currentTarget.value);\n  }, []);\n  const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === \"Enter\") {\n      offEditMode();\n    }\n  };\n\n  return editMode ? (\n    <TextField\n      autoFocus\n      value={title}\n      onBlur={offEditMode}\n      onChange={changeTitle}\n      onKeyPress={onKeyPressHandler}\n    />\n  ) : (\n    <span onDoubleClick={activateEditMode} className={props.className}>\n      {props.title}\n    </span>\n  );\n});\n","import React, { ChangeEvent, useCallback } from \"react\";\nimport { EditableSpan } from \"../../../../components/ui/editableSpan/EditableSpan\";\nimport { Checkbox, IconButton } from \"@mui/material\";\nimport { Delete } from \"@mui/icons-material\";\nimport styles from \"./Task.module.scss\";\nimport { tasksActions } from \"../../index\";\nimport { useActions } from \"../../../../utils/redux-utils\";\nimport { TaskStatuses, TaskType } from \"../../../../api/types\";\n\ntype TaskPropsType = {\n  task: TaskType;\n  todolistId: string;\n};\n\nexport const Task = React.memo((props: TaskPropsType) => {\n  const { updateTask, removeTask } = useActions(tasksActions);\n\n  const removeTasksHandler = useCallback(() => {\n    removeTask({ taskId: props.task.id, todolistId: props.todolistId });\n  }, [props.task.id, props.todolistId]);\n\n  const changeTaskStatusHandler = useCallback(\n    (e: ChangeEvent<HTMLInputElement>) => {\n      let newIsDoneValue = e.currentTarget.checked;\n      updateTask({\n        taskId: props.task.id,\n        todolistId: props.todolistId,\n        domainModel: {\n          status: newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New,\n        },\n      });\n    },\n    [props.task.id, props.todolistId]\n  );\n  const changeTaskTitleHandler = useCallback(\n    (title: string) => {\n      updateTask({\n        taskId: props.task.id,\n        todolistId: props.todolistId,\n        domainModel: { title },\n      });\n    },\n    [props.task.id, props.todolistId]\n  );\n\n  return (\n    <li\n      key={props.task.id}\n      className={\n        props.task.status === TaskStatuses.Completed ? `${styles.isDone}` : \"\"\n      }\n    >\n      <Checkbox\n        checked={props.task.status === TaskStatuses.Completed}\n        color=\"primary\"\n        onChange={changeTaskStatusHandler}\n      />\n\n      <EditableSpan\n        changeTitle={changeTaskTitleHandler}\n        className={\n          props.task.status === TaskStatuses.Completed ? \"is-done\" : \"\"\n        }\n        title={props.task.title}\n      />\n\n      <IconButton onClick={removeTasksHandler} color={\"primary\"} size={\"small\"}>\n        <Delete />\n      </IconButton>\n    </li>\n  );\n});\n","import React, { useCallback } from \"react\";\nimport { FilterValueType, TodolistDomainType } from \"../todolistsReducer\";\nimport {\n  AddItemForm,\n  AddItemFormSubmitHelperType,\n} from \"../../../components/ui/addItemForm/AddItemForm\";\nimport { Task } from \"./Task/Task\";\nimport { EditableSpan } from \"../../../components/ui/editableSpan/EditableSpan\";\nimport { Button, IconButton } from \"@mui/material\";\nimport { Delete } from \"@mui/icons-material\";\nimport { tasksActions, todolistsActions } from \"../index\";\nimport { ButtonPropsColorOverrides } from \"@mui/material/Button/Button\";\nimport { OverridableStringUnion } from \"@mui/types\";\nimport { useActions, useAppDispatch } from \"../../../utils/redux-utils\";\nimport { TaskStatuses, TaskType } from \"../../../api/types\";\n\nexport type TodolistProps = {\n  todolist: TodolistDomainType;\n  tasks: Array<TaskType>;\n};\n\nexport const Todolist = React.memo((props: TodolistProps) => {\n  const {\n    changeTodolistFilter,\n    removeTodolist,\n    changeTodolistTitle,\n  } = useActions(todolistsActions);\n\n  const dispatch = useAppDispatch();\n  const onClickRemoveTodoList = () =>\n    removeTodolist({ todolistId: props.todolist.id });\n\n  const changeTodoListTitle = useCallback(\n    (title: string) => {\n      changeTodolistTitle({ title, todolistId: props.todolist.id });\n    },\n    [props.todolist.id]\n  );\n\n  const onFilterButtonClickHandler = useCallback(\n    (filter: FilterValueType) =>\n      changeTodolistFilter({ key: filter, todolistId: props.todolist.id }),\n    [props.todolist.id]\n  );\n\n  const addTaskCallback = useCallback(\n    async (title: string, helpers: AddItemFormSubmitHelperType) => {\n      let thunk = tasksActions.addTask({\n        title,\n        todolistId: props.todolist.id,\n      });\n      const resultAction = await dispatch(thunk);\n\n      if (tasksActions.addTask.rejected.match(resultAction)) {\n        if (resultAction.payload?.errors?.length) {\n          const errorMessage = resultAction.payload?.errors[0];\n          helpers.setError(errorMessage);\n        } else {\n          helpers.setError(\"Some error occured\");\n        }\n      } else {\n        helpers.setTitle(\"\");\n      }\n    },\n    [props.todolist.id]\n  );\n\n  let allTodolistTasks = props.tasks;\n\n  if (props.todolist.filter === \"Active\") {\n    allTodolistTasks = allTodolistTasks.filter(\n      (t) => t.status === TaskStatuses.New\n    );\n  }\n  if (props.todolist.filter === \"Completed\") {\n    allTodolistTasks = allTodolistTasks.filter(\n      (t) => t.status === TaskStatuses.Completed\n    );\n  }\n\n  const renderFilterButton = (\n    buttonFilter: FilterValueType,\n    color: OverridableStringUnion<\n      \"inherit\" | \"primary\" | \"secondary\" | \"success\",\n      ButtonPropsColorOverrides\n    >,\n    text: string\n  ) => {\n    return (\n      <Button\n        size={\"small\"}\n        color={color}\n        onClick={() => onFilterButtonClickHandler(buttonFilter)}\n        variant={props.todolist.filter === buttonFilter ? \"outlined\" : \"text\"}\n      >\n        {text}\n      </Button>\n    );\n  };\n\n  return (\n    <div>\n      <h3>\n        <EditableSpan\n          title={props.todolist.title}\n          changeTitle={changeTodoListTitle}\n        />\n\n        <IconButton\n          onClick={onClickRemoveTodoList}\n          size={\"small\"}\n          color={\"primary\"}\n          disabled={props.todolist.entityStatus === \"loading\"}\n        >\n          <Delete />\n        </IconButton>\n      </h3>\n\n      <AddItemForm\n        addItem={addTaskCallback}\n        disabled={props.todolist.entityStatus === \"loading\"}\n      />\n\n      <ul style={{ listStyleType: \"none\", paddingLeft: \"0\" }}>\n        {allTodolistTasks.map((t: TaskType) => (\n          <Task task={t} todolistId={props.todolist.id} key={t.id} />\n        ))}\n      </ul>\n\n      <div>\n        {renderFilterButton(\"All\", \"primary\", \"All\")}\n        {renderFilterButton(\"Active\", \"primary\", \"Active\")}\n        {renderFilterButton(\"Completed\", \"primary\", \"Completed\")}\n      </div>\n    </div>\n  );\n});\n","import React, { useCallback, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { TodolistDomainType } from \"./todolistsReducer\";\nimport {\n  AddItemForm,\n  AddItemFormSubmitHelperType,\n} from \"../../components/ui/addItemForm/AddItemForm\";\nimport { Todolist } from \"./Todolist/Todolist\";\nimport Paper from \"@mui/material/Paper\";\nimport Grid from \"@mui/material/Grid\";\nimport { Navigate } from \"react-router-dom\";\nimport { selectIsLoggedIn } from \"../Login/selectors\";\nimport { todolistsActions } from \"./index\";\nimport { TaskStateType } from \"../../app/App\";\nimport { useActions, useAppDispatch } from \"../../utils/redux-utils\";\nimport { AppRootStateType } from \"../../utils/types\";\n\nexport const TodolistsList: React.FC = (props) => {\n  const isLoggedIn = useSelector(selectIsLoggedIn);\n\n  const dispatch = useAppDispatch();\n\n  const { fetchTodolists } = useActions(todolistsActions);\n\n  const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(\n    (state) => state.todolists\n  );\n  const tasks = useSelector<AppRootStateType, TaskStateType>(\n    (state) => state.tasks\n  );\n\n  const addTodolistCallback = useCallback(\n    async (title: string, helpers: AddItemFormSubmitHelperType) => {\n      let thunk = todolistsActions.addTodolist(title);\n      const resultAction = await dispatch(thunk);\n\n      if (todolistsActions.addTodolist.rejected.match(resultAction)) {\n        if (resultAction.payload?.errors?.length) {\n          const errorMessage = resultAction.payload?.errors[0];\n          helpers.setError(errorMessage);\n        } else {\n          helpers.setError(\"Some error occured\");\n        }\n      } else {\n        helpers.setTitle(\"\");\n      }\n    },\n    []\n  );\n\n  useEffect(() => {\n    if (!isLoggedIn) {\n      return;\n    }\n    if (!todolists.length) {\n      fetchTodolists();\n    }\n  }, []);\n\n  if (!isLoggedIn) {\n    return <Navigate to={\"/login\"} />;\n  }\n  return (\n    <>\n      <Grid container style={{ padding: \"20px\" }}>\n        <AddItemForm addItem={addTodolistCallback} />\n      </Grid>\n      <Grid container spacing={5}>\n        {todolists.map((tl) => {\n          return (\n            <Grid item key={tl.id}>\n              <Paper style={{ padding: \"10px\" }} elevation={5}>\n                <Todolist todolist={tl} tasks={tasks[tl.id]} />\n              </Paper>\n            </Grid>\n          );\n        })}\n      </Grid>\n    </>\n  );\n};\n","import { asyncActions as tasksAsyncActions } from \"./taskReducer\";\nimport { TodolistsList } from \"./TodolistsList\";\nimport { asyncActions as todolistsAsyncActions } from \"./todolistsReducer\";\nimport { slice as todolistsSlice } from \"./todolistsReducer\";\nimport { slice as tasksSlice } from \"./taskReducer\";\n\nconst todolistsActions = {\n  ...todolistsAsyncActions,\n  ...todolistsSlice.actions,\n};\n\nconst tasksActions = {\n  ...tasksAsyncActions,\n};\nconst todolistsReducer = todolistsSlice.reducer;\nconst tasksReducer = tasksSlice.reducer;\n\nexport {\n  tasksActions,\n  todolistsActions,\n  TodolistsList,\n  todolistsReducer,\n  tasksReducer,\n};\n","import { AppRootStateType } from \"../../utils/types\";\n\nexport const selectStatus = (state: AppRootStateType) => state.app.status;\nexport const selectIsInitialized = (state: AppRootStateType) =>\n  state.app.isInitialized;\n","import { authAPI } from \"../../api/todolist-api\";\nimport { ResponseStatusCodes } from \"../TodolistsList/todolistsReducer\";\nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { authActions } from \"../Login\";\nimport { appActions } from \"../CommonActions/AppCommonActions\";\n\nexport type RequestStatusType = \"idle\" | \"loading\" | \"succeeded\" | \"failed\";\n\nconst initialState = {\n  status: \"idle\" as RequestStatusType,\n  error: null as string | null,\n  isInitialized: false,\n};\n\nconst initializeApp = createAsyncThunk(\n  \"application/initializeApp\",\n  async (param, thunkAPI) => {\n    const res = await authAPI.me();\n    if (res.data.resultCode === ResponseStatusCodes.success) {\n      thunkAPI.dispatch(authActions.setIsLoggedInAC({ isLoggedIn: true }));\n    }\n  }\n);\n\nexport const asyncActions = {\n  initializeApp,\n};\n\nexport const slice = createSlice({\n  name: \"application\",\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(appActions.setAppStatus, (state, action) => {\n        state.status = action.payload.status;\n      })\n      .addCase(appActions.setAppError, (state, action) => {\n        state.error = action.payload.error;\n      })\n      .addCase(initializeApp.fulfilled, (state) => {\n        state.isInitialized = true;\n      });\n  },\n});\n","import * as appSelectors from \"./selectors\";\nimport {\n  slice,\n  RequestStatusType as T1,\n  asyncActions,\n} from \"./application-reducer\";\n\nconst appReducer = slice.reducer;\nconst actions = slice.actions;\n\nconst appActions = {\n  ...actions,\n  ...asyncActions,\n};\n\nexport type RequestStatusType = T1;\n\nexport { appSelectors, appReducer, appActions };\n","import { combineReducers } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport { authReducer } from \"../features/Login\";\nimport { tasksReducer, todolistsReducer } from \"../features/TodolistsList\";\nimport { appReducer } from \"../features/Application\";\n\nexport const rootReducer = combineReducers({\n  tasks: tasksReducer,\n  todolists: todolistsReducer,\n  app: appReducer,\n  auth: authReducer,\n});\nexport const store = configureStore({\n  reducer: rootReducer,\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunk),\n});\n","import React from \"react\";\nimport Snackbar from \"@mui/material/Snackbar\";\nimport MuiAlert, { AlertProps } from \"@mui/material/Alert\";\nimport { useActions, useAppSelector } from \"../../../utils/redux-utils\";\nimport { appActions } from \"../../../features/CommonActions/AppCommonActions\";\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n  props,\n  ref\n) {\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nexport function ErrorSnackbar() {\n  const { setAppError } = useActions(appActions);\n\n  const error = useAppSelector<string | null>((state) => state.app.error);\n\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setAppError({ error: null });\n  };\n  const isOpen = error !== null;\n\n  return (\n    <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\n      <Alert onClose={handleClose} severity=\"error\" sx={{ width: \"100%\" }}>\n        {error} 😠\n      </Alert>\n    </Snackbar>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport styles from \"./App.module.scss\";\nimport { TodolistsList } from \"../features/TodolistsList\";\nimport Menu from \"@mui/icons-material/Menu\";\nimport LinearProgress from \"@mui/material/LinearProgress\";\nimport AppBar from \"@mui/material/AppBar\";\nimport Button from \"@mui/material/Button\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport Typography from \"@mui/material/Typography\";\nimport Container from \"@mui/material/Container\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport { ErrorSnackbar } from \"../components/ui/ErrorSnackbar/ErrorSnackbar\";\nimport { Navigate, Route, Routes } from \"react-router-dom\";\nimport { authActions, Login } from \"../features/Login/\";\nimport { authSelectors } from \"../features/Login\";\nimport { appSelectors, RequestStatusType } from \"../features/Application\";\nimport { useActions, useAppSelector } from \"../utils/redux-utils\";\nimport { TaskType } from \"../api/types\";\nimport { appActions } from \"../features/Application/\";\n\nexport type TaskStateType = {\n  [key: string]: Array<TaskType>;\n};\n\nfunction App() {\n  const status = useAppSelector<RequestStatusType>(appSelectors.selectStatus);\n  const isInitialized = useAppSelector<boolean>(\n    appSelectors.selectIsInitialized\n  );\n  const isLoggedIn = useAppSelector<boolean>(authSelectors.selectIsLoggedIn);\n\n  const { logout } = useActions(authActions);\n  const { initializeApp } = useActions(appActions);\n\n  useEffect(() => {\n    initializeApp();\n  }, []);\n\n  const logoutHandler = () => logout();\n\n  if (!isInitialized) {\n    return (\n      <div\n        style={{\n          position: \"fixed\",\n          top: \"30%\",\n          textAlign: \"center\",\n          width: \"100%\",\n        }}\n      >\n        <CircularProgress />\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.App}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n            <Menu />\n          </IconButton>\n          <Typography variant=\"h6\">News</Typography>\n          {isLoggedIn && (\n            <Button color=\"inherit\" onClick={logoutHandler}>\n              Logout\n            </Button>\n          )}\n        </Toolbar>\n      </AppBar>\n\n      {status === \"loading\" && (\n        <LinearProgress color=\"secondary\" sx={{ width: \"100%\" }} />\n      )}\n      <Container fixed>\n        <Routes>\n          <Route path=\"/\" element={<TodolistsList />} />\n          <Route path=\"login\" element={<Login />} />\n          <Route path={\"/404\"} element={<h1>404: Page not found</h1>} />\n          <Route path={\"*\"} element={<Navigate to=\"/404\" />} />\n        </Routes>\n      </Container>\n      <ErrorSnackbar />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./app/store\";\nimport { HashRouter } from \"react-router-dom\";\nimport App from \"./app/App\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <HashRouter>\n      <App />,\n    </HashRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}