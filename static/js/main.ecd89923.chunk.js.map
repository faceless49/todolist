{"version":3,"sources":["App.module.scss","components/ui/Button.module.scss","components/ui/Button.tsx","components/ui/addItemForm/AddItemForm.tsx","components/ui/editableSpan/EditableSpan.tsx","components/todolist/Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Button","props","className","filter","value","s","activeFilter","onClick","callBack","AddItemForm","useState","title","setTitle","error","setError","onClickHandler","trim","onChange","e","currentTarget","onKeyPress","key","EditableSpan","editMode","setEditMode","offEditMode","changeTitle","autoFocus","onBlur","onDoubleClick","Todolist","onFilterClickHandler","changeTodoListFilter","todolistID","changeTodoListTitle","removeTodoList","newTitle","addTask","tasks","map","t","id","type","checked","isDone","changeTaskStatus","changeTaskTitle","removeTasks","App","todoListID_1","v1","todoListID_2","todoLists","setTodoLists","setTasks","tID","newIsDone","todoListID","tl","newTask","console","log","updatedTodoLists","todoListsComponents","tasksForTodolist","newTodoListID","newTodoList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.ecd89923.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__qSyM6\",\"error\":\"App_error__39ci2\",\"error-message\":\"App_error-message__2Kx3I\",\"is-done\":\"App_is-done__2uUJ4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"activeFilter\":\"Button_activeFilter__3d36X\"};","import React from 'react';\nimport {keyType} from '../../App';\nimport s from './Button.module.scss'\ntype propsType = {\n  callBack: () => void\n  value: string\n  filter?: keyType\n}\n\nexport const Button = (props: propsType) => {\n\n  return (\n    <button className={props.filter === props.value ? s.activeFilter : ''}\n            onClick={props.callBack}>{props.value}</button>\n  )\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\n\ntype inputType = {\n  callBack: (newTitle: string) => void\n}\n\nexport const AddItemForm = (props: inputType) => {\n    let [title, setTitle] = useState('')\n    let [error, setError] = useState<null | string>(null)\n\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n      setTitle(e.currentTarget.value)\n    }\n\n    const onClickHandler = () => {\n      if (title) {\n        props.callBack(title.trim())\n        setTitle('')\n        setError(null)\n      } else {\n        setError('Title is required')\n      }\n    }\n\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n      if (e.key === 'Enter') {\n        onClickHandler()\n      }\n    }\n\n    return (\n      <div>\n        <input\n          value={title}\n          onChange={onChangeHandler}\n          onKeyPress={onKeyPressHandler}\n          className={error ? 'error' : ''}\n        />\n        <button onClick={onClickHandler}>+</button>\n        {error && <div className={'error-message'}>{error}</div>}\n\n      </div>\n    );\n  }\n;\n\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\nimport s from './EditableSpan.module.scss'\n\ntype EditableSpanPropsType = {\n  className?: string\n  title: string\n  changeTitle: (title: string) => void\n}\n\nexport const EditableSpan = (props: EditableSpanPropsType) => {\n\n  const [editMode, setEditMode] = useState<boolean>(false)\n  const [title, setTitle] = useState<string>(props.title)\n\n  const onEditMode = () => setEditMode(true)\n  const offEditMode = () => {\n    if (title) {\n      props.changeTitle(title)\n    }\n    setEditMode(false)\n  }\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.currentTarget.value)\n  }\n  const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter') {\n      offEditMode()\n    }\n  }\n\n\n  return (\n    editMode\n      ? <input\n        autoFocus\n        value={title}\n        onBlur={offEditMode}\n        onChange={onChangeHandler}\n        onKeyPress={onKeyPressHandler}\n      />\n      : <span\n        onDoubleClick={onEditMode}\n        className={props.className}>{props.title}</span>\n  );\n};\n\n","import React, {ChangeEvent} from 'react';\nimport {keyType} from '../../App';\nimport {Button} from '../ui/Button';\nimport {AddItemForm} from '../ui/addItemForm/AddItemForm';\nimport {EditableSpan} from '../ui/editableSpan/EditableSpan';\n\nexport type TaskType = {\n  id: string\n  title: string\n  isDone: boolean\n}\n\nexport type PropsType = {\n  title: string\n  tasks: Array<TaskType>\n  filter: keyType\n  todolistID: string\n  removeTasks: (id: string, todoListID: string) => void\n  changeTodoListFilter: (key: keyType, todoListID: string) => void\n  addTask: (newTitle: string, todoListID: string) => void\n  changeTaskStatus: (id: string, isDone: boolean, todoListID: string) => void\n  changeTaskTitle: (tID: string, title: string, todoListID: string) => void\n  removeTodoList: (todoListID: string) => void\n  changeTodoListTitle: (title: string, todoListID: string) => void\n}\n\nexport function Todolist(props: PropsType) {\n\n  const onFilterClickHandler = (key: keyType) => {\n    return () => props.changeTodoListFilter(key, props.todolistID)\n  }\n  const onClickRemoveTodoList = () => props.removeTodoList(props.todolistID)\n  const changeTodoListTitle = (title: string) => props.changeTodoListTitle(title, props.todolistID)\n\n\n  return <div>\n    <h3>\n      <EditableSpan\n        title={props.title}\n        changeTitle={changeTodoListTitle}/>\n      <button onClick={onClickRemoveTodoList}>X</button>\n    </h3>\n    <AddItemForm\n      callBack={(newTitle) =>\n        props.addTask(newTitle, props.todolistID)}/>\n\n    <ul>\n\n      {props.tasks.map((t: TaskType) => {\n        const removeTasksHandler = () => {\n          props.removeTasks(t.id, props.todolistID)\n        }\n\n        const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => {\n          props.changeTaskStatus(t.id, e.currentTarget.checked, props.todolistID)\n        }\n        const changeTaskTitleHandler = (title: string) => {\n          props.changeTaskTitle(t.id, title, props.todolistID)\n        }\n\n        return (\n          <li key={t.id}>\n            <input type=\"checkbox\" checked={t.isDone} onChange={changeTaskStatus}/>\n            <EditableSpan\n              changeTitle={changeTaskTitleHandler}\n              className={t.isDone ? 'is-done' : ''}\n              title={t.title}/>\n            <Button callBack={removeTasksHandler} value={'x'}/>\n          </li>\n        )\n      })\n      }\n    </ul>\n\n    <div>\n      <Button\n        callBack={onFilterClickHandler('All')}\n        value={'All'}\n        filter={props.filter}\n      />\n      <Button\n        callBack={onFilterClickHandler('Active')}\n        value={'Active'}\n        filter={props.filter}\n      />\n      <Button\n        callBack={onFilterClickHandler('Completed')}\n        value={'Completed'}\n        filter={props.filter}\n      />\n    </div>\n  </div>\n}\n\n","import React, {useState} from 'react';\nimport s from './App.module.scss';\nimport {TaskType, Todolist} from './components/todolist/Todolist';\nimport {v1} from 'uuid';\nimport {AddItemForm} from './components/ui/addItemForm/AddItemForm';\n\n\nexport type keyType = 'All' | 'Active' | 'Completed'\n\ntype TodoListType = {\n  id: string\n  title: string\n  filter: keyType\n}\n\ntype TaskStateType = {\n  [key: string]: Array<TaskType>\n}\n\nfunction App() {\n  const todoListID_1 = v1()\n  const todoListID_2 = v1()\n  const [todoLists, setTodoLists] = useState<Array<TodoListType>>([\n    {id: todoListID_1, title: 'What to Learn', filter: 'All'},\n    {id: todoListID_2, title: 'What to buy', filter: 'All'}\n  ])\n\n\n  const [tasks, setTasks] = useState<TaskStateType>({\n    [todoListID_1]: [\n      {id: v1(), title: 'HTML&CSS', isDone: true},\n      {id: v1(), title: 'JS', isDone: true},\n      {id: v1(), title: 'ReactJS', isDone: false},\n      {id: v1(), title: 'SASS', isDone: true}\n    ],\n    [todoListID_2]: [\n      {id: v1(), title: 'NASDAQ', isDone: false},\n      {id: v1(), title: 'Amazon', isDone: true},\n      {id: v1(), title: 'Facebook', isDone: false},\n      {id: v1(), title: 'NVIDIA', isDone: true},\n      {id: v1(), title: 'Tesla', isDone: true},\n    ]\n  })\n\n\n  // * Отправляем в 1 объект 2 массива\n  // let [tasks, setTasks] = useState<Array<TaskType>>([\n  //   {id: v1(), title: 'HTML&CSS', isDone: true},\n  //   {id: v1(), title: 'JS', isDone: true},\n  //   {id: v1(), title: 'ReactJS', isDone: false},\n  //   {id: v1(), title: 'SASS', isDone: true}\n  // ])\n\n  const changeTaskStatus = (tID: string, newIsDone: boolean, todoListID: string) => {\n\n    // ? const todoListTasks = tasks[todoListID]\n\n    tasks[todoListID] = tasks[todoListID].map(t => {\n      if (t.id === tID) {\n        return {...t, isDone: newIsDone}\n      }\n      return t\n    })\n    setTasks({...tasks});\n\n    // let currentTask = tasks.find(t => t.id === id)\n    // if (currentTask) {\n    //   currentTask.isDone = newIsDone\n    //   // * 2 variant\n    //   // * currentTask.isDone = !currentTask.isDone\n    //   setTasks([...tasks]);\n    // }\n  }\n\n  const changeTaskTitle = (tID: string, title: string, todoListID: string) => {\n\n\n    tasks[todoListID] = tasks[todoListID].map(t => {\n      if (t.id === tID) {\n        return {...t, title: title}\n      }\n      return t\n    })\n    setTasks({...tasks});\n  }\n  const changeTodoListFilter = (key: keyType, todoListID: string) => {\n    setTodoLists(todoLists.map(tl => tl.id === todoListID ? {...tl, filter: key} : tl))\n  }\n  const addTask = (newTitle: string, todoListID: string) => {\n    const newTask = {id: v1(), title: newTitle, isDone: false};\n    tasks[todoListID] = [newTask, ...tasks[todoListID]]\n    setTasks({...tasks})\n  }\n  const removeTasks = (tID: string, todoListID: string) => {\n    console.log(tasks)\n    tasks[todoListID] = tasks[todoListID].filter(t => t.id !== tID)\n    setTasks({...tasks})\n  }\n  const removeTodoList = (todoListID: string) => {\n    setTodoLists(todoLists.filter(tl => tl.id !== todoListID))\n    delete tasks[todoListID]\n  }\n  const addTodoList = (title: string) => {\n    const newTodoListID = v1()\n    const newTodoList: TodoListType = {\n      id: newTodoListID,\n      title: title,\n      filter: 'All'\n    }\n    setTodoLists([...todoLists, newTodoList])\n    setTasks({...tasks, [newTodoListID]: []})\n  }\n\n  const changeTodoListTitle = (title: string, todoListID: string) => {\n    const updatedTodoLists = todoLists.map(tl => {\n      if (tl.id === todoListID) {\n        return {...tl, title: title}\n      }\n      return tl\n    })\n    setTodoLists(updatedTodoLists)\n  }\n\n\n  const todoListsComponents = todoLists.map(tl => {\n    let tasksForTodolist = tasks[tl.id]\n\n    if (tl.filter === 'Active') {\n      tasksForTodolist = tasks[tl.id].filter(t => !t.isDone)\n    }\n    if (tl.filter === 'Completed') {\n      tasksForTodolist = tasks[tl.id].filter(t => t.isDone)\n    }\n\n    return (\n      <Todolist\n        todolistID={tl.id}\n        title={tl.title}\n        tasks={tasksForTodolist}\n        removeTasks={removeTasks}\n        addTask={addTask}\n        changeTodoListFilter={changeTodoListFilter}\n        changeTaskStatus={changeTaskStatus}\n        removeTodoList={removeTodoList}\n        filter={tl.filter}\n        changeTaskTitle={changeTaskTitle}\n        changeTodoListTitle={changeTodoListTitle}\n      />\n    )\n  })\n\n  return (\n    <div className={s.App}>\n      {todoListsComponents}\n      <AddItemForm callBack={addTodoList}/>\n    </div>\n  );\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}