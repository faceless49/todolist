{"version":3,"sources":["api/todolist-api.ts","utils/error-utils.ts","features/Login/auth-reducer.tsx","app/app-reducer.ts","features/TodolistsList/taskReducer.ts","features/TodolistsList/todolistsReducer.ts","components/ui/addItemForm/AddItemForm.tsx","components/ui/editableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","app/store.ts","components/ui/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/AppWithRedux.tsx","index.tsx","app/App.module.scss"],"names":["TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistApi","get","title","post","todolistId","delete","put","taskId","model","authAPI","data","ResponseStatusCodes","handleServerNetworkError","dispatch","message","setAppErrorAC","setAppStatusAC","handleServerAppError","messages","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","error","isInitialized","updateTaskTC","domainModel","getState","task","tasks","find","t","id","apiModel","deadline","description","priority","startDate","then","res","action","taskID","updateTaskAC","catch","err","finally","console","warn","clearTodosDataAC","fetchTodolistsTC","todos","todolists","forEach","tl","setTasksAC","items","AddItemForm","React","memo","props","log","useState","setTitle","setError","onClickHandler","useCallback","addItem","trim","TextField","label","variant","size","onChange","e","currentTarget","onKeyPress","key","helperText","disabled","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","activateEditMode","offEditMode","changeTitle","autoFocus","onBlur","onDoubleClick","className","Task","removeTasksHandler","removeTasks","changeTaskStatus","newIsDoneValue","checked","Completed","New","changeTaskTitleHandler","changeTaskTitle","Checkbox","Delete","Todolist","useDispatch","changeTodoListTitle","onAllClickHandler","changeTodoListFilter","onActiveClickHandler","onCompletedClickHandler","addTask","allTodolistTasks","filter","removeTodoList","entityStatus","style","listStyleType","paddingLeft","map","Button","TodolistsList","useEffect","useSelector","state","auth","todoLists","removeTask","thunk","removeTaskAC","removeTaskTC","newTitle","resultCode","success","item","addTaskTC","changeStatus","changeTodolistFilterAC","addTodoList","todolist","addTodolistTC","changeTodolistTitleAC","changeTodolistTitleTC","changeTodolistEntityStatusAC","removeTodolistAC","removeTodolistTC","Grid","container","padding","spacing","Paper","elevation","to","rootReducer","combineReducers","copyState","todoListId","app","store","createStore","applyMiddleware","useAppSelector","window","Alert","forwardRef","ref","ErrorSnackbar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","navigate","useNavigate","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","name","handleChange","AppWithRedux","styles","App","AppBar","position","Toolbar","edge","Typography","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.c86a7c2e.chunk.js","sourcesContent":["import axios, { AxiosResponse } from \"axios\";\nimport { TodolistDomainType } from \"../features/TodolistsList/todolistsReducer\";\n\nconst instance = axios.create({\n  baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\n  withCredentials: true,\n  headers: {\n    \"API-KEY\": \"db8d2f12-200b-4467-ba1f-cd791df3f39c\",\n  },\n});\n\n// api\nexport const todolistApi = {\n  //* Todolist\n  getTodolists() {\n    let promise = instance.get<Array<TodolistDomainType>>(\"todo-lists\");\n    return promise;\n  },\n  createTodo(title: string) {\n    return instance.post<CommonResponseType<{ item: TodolistType }>>(\n      \"todo-lists\",\n      {\n        title: title,\n      }\n    );\n  },\n  deleteTodolist(todolistId: string) {\n    return instance.delete<CommonResponseType>(`todo-lists/${todolistId}`);\n  },\n  updateTodolistTitle(todolistId: string, title: string) {\n    return instance.put<CommonResponseType>(`todo-lists/${todolistId}`, {\n      title,\n    });\n  },\n\n  //* Tasks\n  getTasks(todolistId: string) {\n    return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\n  },\n  createTask(todolistId: string, title: string) {\n    return instance.post<\n      { title: string },\n      { data: ResponseType<{ item: TaskType }> }\n    >(`todo-lists/${todolistId}/tasks`, {\n      title,\n    });\n  },\n  deleteTask(todolistId: string, taskId: string) {\n    return instance.delete<ResponseType>(\n      `/todo-lists/${todolistId}/tasks/${taskId}`\n    );\n  },\n  updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\n    return instance.put<\n      UpdateTaskModelType,\n      AxiosResponse<ResponseType<{ item: TaskType }>>\n    >(`/todo-lists/${todolistId}/tasks/${taskId}`, model);\n  },\n};\n\n// * Auth\n\nexport const authAPI = {\n  login(data: LoginParamsType) {\n    return instance.post<\n      LoginParamsType,\n      AxiosResponse<ResponseType<{ userId: number }>>\n    >(\"/auth/login\", data);\n  },\n  me() {\n    return instance.get<ResponseType<MeResponseType>>(\"/auth/me\");\n  },\n  logout() {\n    return instance.delete<ResponseType>(\"auth/login\");\n  },\n};\n\n// types\nexport type FormikErrorType = {\n  email: string;\n  password: string;\n  rememberMe: boolean;\n};\n\ntype MeResponseType = {\n  id: number;\n  email: string;\n  login: string;\n};\n\ntype CommonResponseType<T = {}> = {\n  resultCode: number;\n  messages: Array<string>;\n  fieldsErrors: Array<string>;\n  data: T;\n};\nexport type TodolistType = {\n  id: string;\n  title: string;\n  addedDate: string;\n  order: number;\n};\nexport enum TaskStatuses {\n  New = 0,\n  InProgress = 1,\n  Completed = 2,\n  Draft = 3,\n}\nexport enum TaskPriorities {\n  Low = 0,\n  Middle = 1,\n  Hi = 2,\n  Urgently = 3,\n  Later = 4,\n}\nexport type TaskType = {\n  description: string;\n  title: string;\n  status: TaskStatuses;\n  priority: TaskPriorities;\n  startDate: string;\n  deadline: string;\n  id: string;\n  todoListId: string;\n  order: number;\n  addedDate: string;\n};\ntype GetTasksResponse = {\n  error: string | null;\n  totalCount: number;\n  items: Array<TaskType>;\n};\nexport type ResponseType<D = {}> = {\n  resultCode: number;\n  messages: Array<string>;\n  fieldsErrors: Array<string>;\n  data: D;\n};\nexport type UpdateTaskModelType = {\n  title: string;\n  description: string;\n  status: TaskStatuses;\n  priority: TaskPriorities;\n  startDate: string;\n  deadline: string;\n};\nexport type LoginParamsType = FormikErrorType & {\n  captcha?: string;\n};\nexport type LoginResponseType = {\n  resultCode: number;\n  messages: Array<string>;\n  data: {\n    userId: number;\n  };\n};\n","import {\n  setAppErrorAC,\n  SetAppErrorActionType,\n  setAppStatusAC,\n  SetAppStatusActionType,\n} from \"../app/app-reducer\";\nimport { Dispatch } from \"redux\";\nimport { ResponseType } from \"../api/todolist-api\";\n\nexport const handleServerNetworkError = (\n  dispatch: Dispatch<ErrorUtilsActionsType>,\n  message: string\n) => {\n  dispatch(setAppErrorAC(message));\n  dispatch(setAppStatusAC(\"failed\"));\n};\n\nexport const handleServerAppError = <T>(\n  data: ResponseType<T>,\n  dispatch: Dispatch<ErrorUtilsActionsType>\n) => {\n  if (data.messages[0]) {\n    dispatch(setAppErrorAC(data.messages[0]));\n  } else {\n    dispatch(setAppErrorAC(\"Some Error\"));\n  }\n  dispatch(setAppStatusAC(\"failed\"));\n};\n\ntype ErrorUtilsActionsType = SetAppStatusActionType | SetAppErrorActionType;\n","import { Dispatch } from \"redux\";\nimport {\n  SetAppErrorActionType,\n  setAppStatusAC,\n  SetAppStatusActionType,\n} from \"../../app/app-reducer\";\nimport { authAPI, LoginParamsType } from \"../../api/todolist-api\";\nimport {\n  handleServerAppError,\n  handleServerNetworkError,\n} from \"../../utils/error-utils\";\nimport { clearTodosDataAC } from \"../TodolistsList/todolistsReducer\";\n\nconst initialState = {\n  isLoggedIn: false,\n};\ntype InitialStateType = typeof initialState;\n\nexport const authReducer = (\n  state: InitialStateType = initialState,\n  action: ActionsType\n): InitialStateType => {\n  switch (action.type) {\n    case \"login/SET-IS-LOGGED-IN\":\n      return { ...state, isLoggedIn: action.value };\n    default:\n      return state;\n  }\n};\n\nexport const setIsLoggedInAC = (value: boolean) =>\n  ({ type: \"login/SET-IS-LOGGED-IN\", value } as const);\n\n// thunks\nexport const loginTC = (data: LoginParamsType) => (\n  dispatch: Dispatch<ActionsType>\n) => {\n  dispatch(setAppStatusAC(\"loading\"));\n  authAPI\n    .login(data)\n    .then((res) => {\n      if (res.data.resultCode === ResponseStatusCodes.success) {\n        dispatch(setIsLoggedInAC(true));\n        dispatch(setAppStatusAC(\"succeeded\"));\n      } else {\n        handleServerAppError(res.data, dispatch);\n      }\n    })\n    .catch((error) => {\n      handleServerAppError(error, dispatch);\n    });\n};\n\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\n  dispatch(setAppStatusAC(\"loading\"));\n  authAPI\n    .logout()\n    .then((res) => {\n      if (res.data.resultCode === ResponseStatusCodes.success) {\n        dispatch(setIsLoggedInAC(false));\n        dispatch(setAppStatusAC(\"succeeded\"));\n        dispatch(clearTodosDataAC());\n      } else {\n        handleServerAppError(res.data, dispatch);\n      }\n    })\n    .catch((error) => {\n      handleServerNetworkError(error, dispatch(error));\n    });\n};\n\n// types\ntype ActionsType =\n  | ReturnType<typeof setIsLoggedInAC>\n  | SetAppStatusActionType\n  | SetAppErrorActionType\n  | ReturnType<typeof clearTodosDataAC>;\nenum ResponseStatusCodes {\n  success = 0,\n  error = 1,\n  captcha = 10,\n}\n","import { Dispatch } from \"redux\";\nimport { authAPI } from \"../api/todolist-api\";\nimport { setIsLoggedInAC } from \"../features/Login/auth-reducer\";\nimport { ResponseStatusCodes } from \"../features/TodolistsList/todolistsReducer\";\n\nexport type RequestStatusType = \"idle\" | \"loading\" | \"succeeded\" | \"failed\";\n\nconst initialState = {\n  status: \"idle\" as RequestStatusType,\n  error: null as string | null,\n  isInitialized: false,\n};\n\ntype InitialStateType = typeof initialState;\n\nexport const appReducer = (\n  state: InitialStateType = initialState,\n  action: ActionsType\n): InitialStateType => {\n  switch (action.type) {\n    case \"APP/SET-STATUS\":\n      return { ...state, status: action.status };\n    case \"APP/SET-ERROR\":\n      return { ...state, error: action.error };\n    case \"APP/SET-IS-INITIALIZED\":\n      return { ...state, isInitialized: action.isInitialized };\n    default:\n      return state;\n  }\n};\n\nexport const setAppStatusAC = (status: RequestStatusType) =>\n  ({ type: \"APP/SET-STATUS\", status } as const);\n\nexport const setAppErrorAC = (error: string | null) =>\n  ({\n    type: \"APP/SET-ERROR\",\n    error,\n  } as const);\n\nexport const setAppIsInitialized = (isInitialized: boolean) =>\n  ({ type: \"APP/SET-IS-INITIALIZED\", isInitialized } as const);\n\nexport const initializeAppTC = () => (dispatch: Dispatch<ActionsType>) => {\n  authAPI\n    .me()\n    .then((res) => {\n      if (res.data.resultCode === ResponseStatusCodes.success) {\n        dispatch(setIsLoggedInAC(true));\n      } else {\n      }\n      //* TODO: Fix add prealoader\n    })\n    .finally(() => {\n      dispatch(setAppIsInitialized(true));\n    });\n};\n\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>;\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>;\nexport type SetIsLoggedInActionType = ReturnType<typeof setIsLoggedInAC>;\nexport type SetAppIsInitialized = ReturnType<typeof setAppIsInitialized>;\n\ntype ActionsType =\n  | SetAppStatusActionType\n  | SetAppErrorActionType\n  | SetIsLoggedInActionType\n  | SetAppIsInitialized;\n","import {\n  AddTodolistAT,\n  clearTodosDataAC,\n  RemoveTodolistAT,\n  SetTodosActionType,\n} from \"./todolistsReducer\";\nimport { TaskStateType } from \"../../app/AppWithRedux\";\nimport {\n  TaskPriorities,\n  TaskStatuses,\n  TaskType,\n  todolistApi,\n  UpdateTaskModelType,\n} from \"../../api/todolist-api\";\nimport { AppRootStateType } from \"../../app/store\";\nimport {\n  SetAppErrorActionType,\n  setAppStatusAC,\n  SetAppStatusActionType,\n} from \"../../app/app-reducer\";\nimport { AxiosError } from \"axios\";\nimport {\n  handleServerAppError,\n  handleServerNetworkError,\n} from \"../../utils/error-utils\";\nimport { ThunkAction } from \"redux-thunk\";\n\nconst initialState: TaskStateType = {};\nenum ResponseStatusCodes {\n  success = 0,\n  error = 1,\n  captcha = 10,\n}\n\nexport const tasksReducer = (\n  state: TaskStateType = initialState,\n  action: ActionsType\n): TaskStateType => {\n  switch (action.type) {\n    case \"SET-TODOS\":\n      let copyState = { ...state };\n      action.todolists.forEach((tl) => {\n        copyState[tl.id] = [];\n      });\n      return copyState;\n    case \"REMOVE-TASK\": {\n      return {\n        ...state,\n        [action.todolistId]: state[action.todolistId].filter(\n          (t) => t.id !== action.taskID\n        ),\n      };\n    }\n    case \"ADD-TASK\":\n      return {\n        ...state,\n        [action.task.todoListId]: [\n          action.task,\n          ...state[action.task.todoListId],\n        ],\n      };\n    // const stateCopy = { ...state };\n    // const tasks = stateCopy[action.task.todolistId];\n    // console.log(tasks);\n    // const newTasks = [action.task, ...tasks];\n    // console.log(newTasks);\n    //\n    // stateCopy[action.task.todolistId] = newTasks;\n    // return stateCopy;\n\n    case \"UPDATE-TASK\": {\n      return {\n        ...state,\n        [action.todolistId]: state[action.todolistId].map((t) =>\n          t.id === action.taskID ? { ...t, ...action.model } : t\n        ),\n      };\n    }\n    case \"ADD-TODOLIST\":\n      return { ...state, [action.todolist.id]: [] };\n    case \"REMOVE-TODOLIST\": {\n      const copyState = { ...state };\n      delete copyState[action.todolistId];\n      return copyState;\n    }\n\n    case \"SET-TASKS\": {\n      return { ...state, [action.todolistId]: action.tasks };\n      // const stateCopy = { ...state };\n      // stateCopy[action.todolistId] = action.tasks;\n      // return stateCopy;\n    }\n    case \"CLEAR-DATA\":\n      return {};\n    default:\n      return state;\n  }\n};\n\n// *===== Action Creators\n\nexport const removeTaskAC = (taskID: string, todolistId: string) =>\n  ({ type: \"REMOVE-TASK\", taskID, todolistId } as const);\n\nexport const addTaskAC = (task: TaskType) =>\n  ({ type: \"ADD-TASK\", task } as const);\n\nexport const updateTaskAC = (\n  taskID: string,\n  model: UpdateDomainModelTaskType,\n  todolistId: string\n) => ({ type: \"UPDATE-TASK\", model, taskID, todolistId } as const);\n\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\n  ({ type: \"SET-TASKS\", tasks, todolistId } as const);\n\n// * ===== THUNKS\n\ntype ThunkType = ThunkAction<void, AppRootStateType, unknown, ActionsType>;\n\nexport const fetchTasksTC = (todolistId: string): ThunkType => (dispatch) => {\n  dispatch(setAppStatusAC(\"loading\"));\n  todolistApi\n    .getTasks(todolistId)\n    .then((res) => {\n      const tasks = res.data.items;\n      const action = setTasksAC(tasks, todolistId);\n      dispatch(action);\n    })\n    .catch((err: AxiosError) => handleServerNetworkError(dispatch, err.message))\n    .finally(() => dispatch(setAppStatusAC(\"succeeded\")));\n};\n\nexport const removeTaskTC = (taskId: string, todolistId: string): ThunkType => (\n  dispatch\n) => {\n  dispatch(setAppStatusAC(\"loading\"));\n  todolistApi\n    .deleteTask(todolistId, taskId)\n    .then((res) => {\n      dispatch(removeTaskAC(taskId, todolistId));\n    })\n    .catch((err: AxiosError) => handleServerNetworkError(dispatch, err.message))\n    .finally(() => dispatch(setAppStatusAC(\"succeeded\")));\n};\n\nexport const addTaskTC = (title: string, todolistId: string): ThunkType => (\n  dispatch\n) => {\n  dispatch(setAppStatusAC(\"loading\"));\n  todolistApi\n    .createTask(todolistId, title)\n    .then((res) => {\n      if (res.data.resultCode === ResponseStatusCodes.success) {\n        let task = res.data.data.item;\n        const action = addTaskAC(task);\n        dispatch(action);\n      } else {\n        handleServerAppError(res.data, dispatch);\n      }\n    })\n    .catch((err: AxiosError) => {\n      // dispatch(setAppErrorAC(res.message)); = Proxy Refactor\n      // dispatch(setAppStatusAC(\"failed\"));\n      handleServerNetworkError(dispatch, err.message);\n    })\n    .finally(() => {\n      dispatch(setAppStatusAC(\"succeeded\"));\n    });\n};\n\nexport const updateTaskTC = (\n  taskId: string,\n  todolistId: string,\n  domainModel: UpdateDomainModelTaskType\n): ThunkType => (dispatch, getState: () => AppRootStateType) => {\n  // так как мы обязаны на сервер отправить все св-ва, которые сервер ожидает, а не только\n  // те, которые мы хотим обновить, соответственно нам нужно в этом месте взять таску целиком  // чтобы у неё отобрать остальные св-ва\n\n  const allTasksFromState = getState().tasks;\n  const tasksForCurrentTodolist = allTasksFromState[todolistId];\n  const task = tasksForCurrentTodolist.find((t) => {\n    return t.id === taskId;\n  });\n\n  if (!task) {\n    //throw new Error(\"task not found in the state\");\n    console.warn(\"task not found in the state\");\n    return;\n  }\n  const apiModel: UpdateTaskModelType = {\n    deadline: task.deadline,\n    description: task.description,\n    priority: task.priority,\n    startDate: task.startDate,\n    title: task.title,\n    status: task.status,\n    ...domainModel,\n  };\n  dispatch(setAppStatusAC(\"loading\"));\n  todolistApi\n    .updateTask(todolistId, taskId, apiModel)\n    .then((res) => {\n      const action = updateTaskAC(taskId, domainModel, todolistId);\n      dispatch(action);\n    })\n    .catch((err: AxiosError) => handleServerNetworkError(dispatch, err.message))\n    .finally(() => dispatch(setAppStatusAC(\"succeeded\")));\n};\n\n// types\nexport type UpdateDomainModelTaskType = {\n  title?: string;\n  description?: string;\n  status?: TaskStatuses;\n  priority?: TaskPriorities;\n  startDate?: string;\n  deadline?: string;\n};\ntype ActionsType =\n  | ReturnType<typeof removeTaskAC>\n  | ReturnType<typeof addTaskAC>\n  | ReturnType<typeof updateTaskAC>\n  | ReturnType<typeof setTasksAC>\n  | AddTodolistAT\n  | RemoveTodolistAT\n  | SetTodosActionType\n  | SetAppStatusActionType\n  | SetAppErrorActionType\n  | ReturnType<typeof clearTodosDataAC>;\n","import { todolistApi, TodolistType } from \"../../api/todolist-api\";\nimport { AppRootStateType } from \"../../app/store\";\nimport {\n  RequestStatusType,\n  SetAppErrorActionType,\n  setAppStatusAC,\n  SetAppStatusActionType,\n} from \"../../app/app-reducer\";\nimport { AxiosError } from \"axios\";\nimport {\n  handleServerAppError,\n  handleServerNetworkError,\n} from \"../../utils/error-utils\";\nimport { fetchTasksTC } from \"./taskReducer\";\nimport { ThunkAction } from \"redux-thunk\";\n\nconst initialState: Array<TodolistDomainType> = [];\nexport enum ResponseStatusCodes {\n  success = 0,\n  error = 1,\n  captcha = 10,\n}\n\nexport const todolistsReducer = (\n  state: Array<TodolistDomainType> = initialState,\n  action: ActionsType\n): TodolistDomainType[] => {\n  switch (action.type) {\n    case \"SET-TODOS\":\n      return action.todolists.map((tl) => ({\n        ...tl,\n        filter: \"All\",\n        entityStatus: \"idle\",\n      }));\n    case \"REMOVE-TODOLIST\":\n      return state.filter((tl) => tl.id !== action.todolistId);\n    case \"ADD-TODOLIST\":\n      return [\n        { ...action.todolist, filter: \"All\", entityStatus: \"idle\" },\n        ...state,\n      ];\n    case \"CHANGE-TODOLIST-TITLE\":\n      return state.map((tl) =>\n        tl.id === action.todolistId ? { ...tl, title: action.title } : tl\n      );\n    case \"CHANGE-TODOLIST-FILTER\":\n      return state.map((tl) =>\n        tl.id === action.todolistId ? { ...tl, filter: action.key } : tl\n      );\n    case \"CHANGE-TODOLIST-ENTITY-TYPE\":\n      return state.map((tl) =>\n        tl.id === action.todolistId\n          ? { ...tl, entityStatus: action.entityStatus }\n          : tl\n      );\n    case \"CLEAR-DATA\":\n      return [];\n    default:\n      return state;\n  }\n};\n\n// ** ===== Action Creators\n\nexport const removeTodolistAC = (todolistId: string) =>\n  ({ type: \"REMOVE-TODOLIST\", todolistId } as const);\n\nexport const addTodoListAC = (todolist: TodolistType) =>\n  ({ type: \"ADD-TODOLIST\", todolist } as const);\n\nexport const changeTodolistTitleAC = (title: string, todolistId: string) =>\n  ({\n    type: \"CHANGE-TODOLIST-TITLE\",\n    todolistId,\n    title,\n  } as const);\n\nexport const changeTodolistFilterAC = (\n  key: FilterValueType,\n  todolistId: string\n) =>\n  ({\n    type: \"CHANGE-TODOLIST-FILTER\",\n    todolistId,\n    key,\n  } as const);\n\nexport const setTodosAC = (todolists: Array<TodolistDomainType>) =>\n  ({\n    type: \"SET-TODOS\",\n    todolists,\n  } as const);\n\nexport const changeTodolistEntityStatusAC = (\n  todolistId: string,\n  entityStatus: RequestStatusType\n) =>\n  ({\n    type: \"CHANGE-TODOLIST-ENTITY-TYPE\",\n    todolistId,\n    entityStatus,\n  } as const);\n\nexport const clearTodosDataAC = () => ({ type: \"CLEAR-DATA\" } as const);\n\n// ** ===== THUNKS\n\nexport type ThunkType = ThunkAction<\n  void,\n  AppRootStateType,\n  unknown,\n  ActionsType\n>;\n\nexport const fetchTodolistsTC = (): ThunkType => (\n  dispatch,\n  getState: () => AppRootStateType\n): void => {\n  dispatch(setAppStatusAC(\"loading\"));\n  todolistApi\n    .getTodolists()\n    .then((res) => {\n      let todos = res.data;\n      dispatch(setTodosAC(todos));\n      return res.data;\n    })\n    .then((todos) => {\n      todos.forEach((tl) => {\n        dispatch(fetchTasksTC(tl.id));\n      });\n    })\n    .catch((err: AxiosError) => handleServerNetworkError(dispatch, err.message))\n    .finally(() => dispatch(setAppStatusAC(\"succeeded\")));\n};\n\nexport const removeTodolistTC = (todolistId: string): ThunkType => {\n  return (dispatch) => {\n    dispatch(setAppStatusAC(\"loading\"));\n    dispatch(changeTodolistEntityStatusAC(todolistId, \"loading\"));\n    todolistApi\n      .deleteTodolist(todolistId)\n      .then((res) => {\n        if (res.data.resultCode === ResponseStatusCodes.success) {\n          dispatch(removeTodolistAC(todolistId));\n        } else {\n          handleServerAppError(res.data, dispatch);\n        }\n      })\n      .catch((err: AxiosError) =>\n        handleServerNetworkError(dispatch, err.message)\n      )\n      .finally(() => dispatch(setAppStatusAC(\"succeeded\")));\n  };\n};\n\nexport const addTodolistTC = (title: string): ThunkType => (dispatch) => {\n  dispatch(setAppStatusAC(\"loading\"));\n  todolistApi\n    .createTodo(title)\n    .then((res) => {\n      if (res.data.resultCode === ResponseStatusCodes.success) {\n        dispatch(addTodoListAC(res.data.data.item));\n      } else {\n        //   if (res.data.messages[0]) {\n        //     dispatch(setAppErrorAC(res.data.messages[0]));\n        //   } else {\n        //     dispatch(setAppErrorAC(\"Some Error\"));\n        //   }\n        //   dispatch(setAppStatusAC(\"failed\"));\n        // }\n        // *===== Generic function\n        handleServerAppError<{ item: TodolistType }>(res.data, dispatch); // You can delete <T>.\n      }\n    })\n    .catch((err: AxiosError) => {\n      handleServerNetworkError(dispatch, err.message);\n    })\n    .finally(() => dispatch(setAppStatusAC(\"succeeded\")));\n};\n\nexport const changeTodolistTitleTC = (\n  title: string,\n  todolistId: string\n): ThunkType => (dispatch) => {\n  dispatch(setAppStatusAC(\"loading\"));\n  todolistApi\n    .updateTodolistTitle(todolistId, title)\n    .then((res) => {\n      if (res.data.resultCode === ResponseStatusCodes.success) {\n        dispatch(changeTodolistTitleAC(title, todolistId));\n      } else {\n        handleServerAppError(res.data, dispatch);\n      }\n    })\n    .catch((err: AxiosError) => {\n      handleServerNetworkError(dispatch, err.message);\n    })\n    .finally(() => dispatch(setAppStatusAC(\"succeeded\")));\n};\n\n// * types\n\nexport type AddTodolistAT = ReturnType<typeof addTodoListAC>;\nexport type RemoveTodolistAT = ReturnType<typeof removeTodolistAC>;\nexport type SetTodosActionType = ReturnType<typeof setTodosAC>;\nexport type ChangeTodolistEntityStatusActionType = ReturnType<\n  typeof changeTodolistEntityStatusAC\n>;\n\nexport type FilterValueType = \"All\" | \"Active\" | \"Completed\";\n\nexport type TodolistDomainType = TodolistType & {\n  filter: FilterValueType;\n  entityStatus: RequestStatusType;\n};\nexport type ActionsType =\n  | AddTodolistAT\n  | RemoveTodolistAT\n  | SetTodosActionType\n  | ReturnType<typeof changeTodolistTitleAC>\n  | ReturnType<typeof changeTodolistFilterAC>\n  | SetAppStatusActionType\n  | SetAppErrorActionType\n  | ChangeTodolistEntityStatusActionType\n  | ReturnType<typeof clearTodosDataAC>;\n","import React, {\n  ChangeEvent,\n  KeyboardEvent,\n  useCallback,\n  useState,\n} from \"react\";\nimport { IconButton, TextField } from \"@mui/material\";\nimport { AddBox } from \"@mui/icons-material\";\n\ntype AddItemFormPropsType = {\n  addItem: (newTitle: string) => void;\n  disabled?: boolean;\n};\n\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\n  // Обернули в хок, но у нас в пропсах addItem callback, поэтому перерисовка все равно произойдет\n  console.log(\"AddItemForm render\");\n\n  let [title, setTitle] = useState(\"\");\n  let [error, setError] = useState<null | string>(null);\n\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.currentTarget.value);\n  };\n\n  const onClickHandler = useCallback(() => {\n    if (title) {\n      props.addItem(title.trim());\n      setTitle(\"\");\n      setError(null);\n    } else {\n      setError(\"Title is required\");\n    }\n  }, [props, title]);\n\n  const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (error !== null) {\n      setError(null);\n    }\n    if (e.key === \"Enter\") {\n      onClickHandler();\n    }\n  };\n\n  return (\n    <div>\n      <TextField\n        value={title}\n        label={\"Title\"}\n        variant={\"outlined\"}\n        size={\"small\"}\n        onChange={onChangeHandler}\n        onKeyPress={onKeyPressHandler}\n        error={!!error} // ! TODO: Use StyleComponent later for text required\n        helperText={error && error}\n        disabled={props.disabled}\n      />\n      <IconButton\n        size={\"small\"}\n        color={\"primary\"}\n        onClick={onClickHandler}\n        disabled={props.disabled}\n      >\n        <AddBox />\n      </IconButton>\n    </div>\n  );\n});\n","import React, {\n  ChangeEvent,\n  KeyboardEvent,\n  useCallback,\n  useState,\n} from \"react\";\nimport s from \"./EditableSpan.module.scss\";\nimport { TextField } from \"@mui/material\";\n\ntype EditableSpanPropsType = {\n  className?: string;\n  title: string;\n  changeTitle: (title: string) => void;\n};\n\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\n  const [editMode, setEditMode] = useState<boolean>(false);\n  const [title, setTitle] = useState<string>(props.title);\n\n  const activateEditMode = () => {\n    setEditMode(true);\n    setTitle(props.title);\n  };\n  const offEditMode = () => {\n    if (title) {\n      props.changeTitle(title);\n    }\n    setEditMode(!activateEditMode);\n  };\n\n  const changeTitle = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.currentTarget.value);\n  }, []);\n  const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === \"Enter\") {\n      offEditMode();\n    }\n  }; // TODO: Why when i wrapped onkeypresshandler usecallback no set title\n\n  return editMode ? (\n    <TextField\n      autoFocus\n      value={title}\n      onBlur={offEditMode}\n      onChange={changeTitle}\n      onKeyPress={onKeyPressHandler}\n    />\n  ) : (\n    <span onDoubleClick={activateEditMode} className={props.className}>\n      {props.title}\n    </span>\n  );\n});\n","import React, { ChangeEvent, useCallback } from \"react\";\nimport { TaskStatuses, TaskType } from \"../../../../api/todolist-api\";\nimport { EditableSpan } from \"../../../../components/ui/editableSpan/EditableSpan\";\nimport { Checkbox, IconButton } from \"@mui/material\";\nimport { Delete } from \"@mui/icons-material\";\n\ntype TaskPropsType = {\n  removeTasks: (id: string, todolistId: string) => void;\n  changeTaskStatus: (\n    id: string,\n    status: TaskStatuses,\n    todolistId: string\n  ) => void;\n  changeTaskTitle: (tID: string, title: string, todolistId: string) => void;\n  task: TaskType;\n  todolistId: string;\n};\n\nexport const Task = React.memo((props: TaskPropsType) => {\n  console.log(\"task render\");\n  const removeTasksHandler = useCallback(() => {\n    props.removeTasks(props.task.id, props.todolistId);\n  }, [props.task.id, props.removeTasks, props.todolistId]);\n  const changeTaskStatus = useCallback(\n    (e: ChangeEvent<HTMLInputElement>) => {\n      let newIsDoneValue = e.currentTarget.checked;\n      props.changeTaskStatus(\n        props.task.id,\n        newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New,\n        props.todolistId\n      );\n    },\n    [props.task.id, props.changeTaskStatus, props.todolistId]\n  );\n  const changeTaskTitleHandler = useCallback(\n    (title: string) => {\n      props.changeTaskTitle(props.task.id, title, props.todolistId);\n    },\n    [props.task.id, props.changeTaskTitle, props.todolistId]\n  );\n\n  return (\n    <li key={props.task.id}>\n      <Checkbox\n        checked={props.task.status === TaskStatuses.Completed}\n        color=\"primary\"\n        onChange={changeTaskStatus}\n      />\n\n      <EditableSpan\n        changeTitle={changeTaskTitleHandler}\n        className={\n          props.task.status === TaskStatuses.Completed ? \"is-done\" : \"\"\n        }\n        title={props.task.title}\n      />\n\n      <IconButton onClick={removeTasksHandler} color={\"primary\"} size={\"small\"}>\n        <Delete />\n      </IconButton>\n    </li>\n  );\n});\n","import React, { useCallback, useEffect } from \"react\";\n\nimport { useDispatch } from \"react-redux\";\nimport { TaskStatuses, TaskType } from \"../../../api/todolist-api\";\nimport { FilterValueType } from \"../todolistsReducer\";\nimport { fetchTasksTC } from \"../taskReducer\";\nimport { AddItemForm } from \"../../../components/ui/addItemForm/AddItemForm\";\nimport { Task } from \"./Task/Task\";\nimport { EditableSpan } from \"../../../components/ui/editableSpan/EditableSpan\";\nimport { Button, IconButton } from \"@mui/material\";\nimport { Delete } from \"@mui/icons-material\";\nimport { RequestStatusType } from \"../../../app/app-reducer\";\n\nexport const Todolist = React.memo((props: PropsType) => {\n  const dispatch = useDispatch();\n  // useEffect(() => {\n  //   dispatch(fetchTasksTC(props.todolistId));\n  // }, []);\n\n  const onClickRemoveTodoList = () => props.removeTodoList(props.todolistId);\n  const changeTodoListTitle = useCallback(\n    (title: string) => {\n      props.changeTodoListTitle(title, props.todolistId);\n    },\n    [props.changeTodoListTitle, props.todolistId]\n  );\n\n  const onAllClickHandler = useCallback(\n    () => props.changeTodoListFilter(\"All\", props.todolistId),\n    [props.changeTodoListFilter, props.todolistId]\n  );\n  const onActiveClickHandler = useCallback(\n    () => props.changeTodoListFilter(\"Active\", props.todolistId),\n    [props.changeTodoListFilter, props.todolistId]\n  );\n  const onCompletedClickHandler = useCallback(\n    () => props.changeTodoListFilter(\"Completed\", props.todolistId),\n    [props.changeTodoListFilter, props.todolistId]\n  );\n\n  const addTask = useCallback(\n    (title: string) => {\n      props.addTask(title, props.todolistId);\n    },\n    [props.addTask, props.todolistId]\n  );\n\n  let allTodolistTasks = props.tasks;\n\n  if (props.filter === \"Active\") {\n    allTodolistTasks = allTodolistTasks.filter(\n      (t) => t.status === TaskStatuses.New\n    );\n  }\n  if (props.filter === \"Completed\") {\n    allTodolistTasks = allTodolistTasks.filter(\n      (t) => t.status === TaskStatuses.Completed\n    );\n  }\n\n  return (\n    <div>\n      <h3>\n        <EditableSpan title={props.title} changeTitle={changeTodoListTitle} />\n\n        <IconButton\n          onClick={onClickRemoveTodoList}\n          size={\"small\"}\n          color={\"primary\"}\n          disabled={props.entityStatus === \"loading\"}\n        >\n          <Delete />\n        </IconButton>\n      </h3>\n\n      <AddItemForm\n        addItem={addTask}\n        disabled={props.entityStatus === \"loading\"}\n      />\n\n      <ul style={{ listStyleType: \"none\", paddingLeft: \"0\" }}>\n        {allTodolistTasks.map((t: TaskType) => (\n          <Task\n            task={t}\n            todolistId={props.todolistId}\n            removeTasks={props.removeTasks}\n            changeTaskStatus={props.changeTaskStatus}\n            changeTaskTitle={props.changeTaskTitle}\n            key={t.id}\n          />\n        ))}\n      </ul>\n\n      <div>\n        <Button\n          size={\"small\"}\n          variant={\"contained\"}\n          color={props.filter === \"All\" ? \"secondary\" : \"primary\"}\n          onClick={onAllClickHandler}\n        >\n          All\n        </Button>\n\n        <Button\n          size={\"small\"}\n          color={props.filter === \"Active\" ? \"secondary\" : \"primary\"}\n          onClick={onActiveClickHandler}\n          variant={\"contained\"}\n        >\n          Active\n        </Button>\n\n        <Button\n          size={\"small\"}\n          color={props.filter === \"Completed\" ? \"secondary\" : \"primary\"}\n          onClick={onCompletedClickHandler}\n          variant={\"contained\"}\n        >\n          Completed\n        </Button>\n      </div>\n    </div>\n  );\n});\n\nexport type PropsType = {\n  todolistId: string;\n  title: string;\n  tasks: Array<TaskType>;\n  filter: FilterValueType;\n  entityStatus: RequestStatusType;\n  removeTasks: (id: string, todolistId: string) => void;\n  changeTodoListFilter: (key: FilterValueType, todolistId: string) => void;\n  addTask: (newTitle: string, todolistId: string) => void;\n  changeTaskStatus: (\n    id: string,\n    status: TaskStatuses,\n    todolistId: string\n  ) => void;\n  changeTaskTitle: (tID: string, title: string, todolistId: string) => void;\n  removeTodoList: (todolistId: string) => void;\n  changeTodoListTitle: (title: string, todolistId: string) => void;\n};\n","import React, { useCallback, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  addTodolistTC,\n  changeTodolistFilterAC,\n  changeTodolistTitleTC,\n  FilterValueType,\n  removeTodolistTC,\n  fetchTodolistsTC,\n  TodolistDomainType,\n} from \"./todolistsReducer\";\nimport { AppRootStateType } from \"../../app/store\";\nimport { TaskStateType } from \"../../app/AppWithRedux\";\nimport { TaskStatuses } from \"../../api/todolist-api\";\nimport { addTaskTC, removeTaskTC, updateTaskTC } from \"./taskReducer\";\nimport { AddItemForm } from \"../../components/ui/addItemForm/AddItemForm\";\nimport { Todolist } from \"./Todolist/Todolist\";\nimport Paper from \"@mui/material/Paper\";\nimport Grid from \"@mui/material/Grid\";\nimport { Navigate } from \"react-router-dom\";\n\nexport const TodolistsList: React.FC = (props) => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (!isLoggedIn) {\n      return;\n    }\n    dispatch(fetchTodolistsTC());\n  }, []);\n\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(\n    (state) => state.auth.isLoggedIn\n  );\n\n  const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(\n    (state) => state.todoLists\n  );\n  const tasks = useSelector<AppRootStateType, TaskStateType>(\n    (state) => state.tasks\n  );\n\n  const removeTask = useCallback(\n    (taskId: string, todolistId: string) => {\n      const thunk = removeTaskTC(taskId, todolistId);\n      dispatch(thunk);\n    },\n    [dispatch]\n  );\n  const addTask = useCallback(\n    (newTitle: string, todolistId: string) => {\n      const thunk = addTaskTC(newTitle, todolistId);\n      dispatch(thunk);\n    },\n    [dispatch]\n  );\n  const changeStatus = useCallback(\n    (taskId: string, status: TaskStatuses, todolistId: string) => {\n      dispatch(updateTaskTC(taskId, todolistId, { status }));\n    },\n    [dispatch]\n  );\n\n  const changeTaskTitle = useCallback(\n    (taskId: string, title: string, todolistId: string) => {\n      dispatch(updateTaskTC(taskId, todolistId, { title }));\n    },\n    [dispatch]\n  );\n\n  const changeTodoListFilter = useCallback(\n    (key: FilterValueType, todolistId: string) => {\n      const action = changeTodolistFilterAC(key, todolistId);\n      dispatch(action);\n    },\n    [dispatch]\n  );\n\n  const addTodoList = useCallback(\n    (title: string) => {\n      dispatch(addTodolistTC(title));\n    },\n    [dispatch]\n  );\n  const changeTodoListTitle = useCallback(\n    (title: string, todolistId: string) => {\n      dispatch(changeTodolistTitleTC(title, todolistId));\n    },\n    [dispatch]\n  );\n\n  const removeTodoList = useCallback(\n    (todolistId: string) => {\n      dispatch(removeTodolistTC(todolistId));\n    },\n    [dispatch]\n  );\n\n  if (!isLoggedIn) {\n    return <Navigate to={\"/login\"} />;\n  }\n\n  return (\n    <>\n      <Grid container style={{ padding: \"20px\" }}>\n        <AddItemForm addItem={addTodoList} />\n      </Grid>\n      <Grid container spacing={5}>\n        {todolists.map((tl) => {\n          return (\n            <Grid item key={tl.id}>\n              <Paper style={{ padding: \"10px\" }} elevation={5}>\n                <Todolist\n                  todolistId={tl.id}\n                  title={tl.title}\n                  tasks={tasks[tl.id]}\n                  entityStatus={tl.entityStatus}\n                  removeTasks={removeTask}\n                  addTask={addTask}\n                  changeTodoListFilter={changeTodoListFilter}\n                  changeTaskStatus={changeStatus}\n                  removeTodoList={removeTodoList}\n                  filter={tl.filter}\n                  changeTaskTitle={changeTaskTitle}\n                  changeTodoListTitle={changeTodoListTitle}\n                />\n              </Paper>\n            </Grid>\n          );\n        })}\n      </Grid>\n    </>\n  );\n};\n","import { applyMiddleware, combineReducers, createStore } from \"redux\";\nimport thunk, { ThunkAction } from \"redux-thunk\";\nimport { tasksReducer } from \"../features/TodolistsList/taskReducer\";\nimport { todolistsReducer } from \"../features/TodolistsList/todolistsReducer\";\nimport { appReducer } from \"./app-reducer\";\nimport { authReducer } from \"../features/Login/auth-reducer\";\nimport { TypedUseSelectorHook, useSelector } from \"react-redux\";\n\n// объединяя reducer-ы с помощью combineReducers,\n// мы задаём структуру нашего единственного объекта-состояния\nconst rootReducer = combineReducers({\n  tasks: tasksReducer,\n  todoLists: todolistsReducer,\n  app: appReducer,\n  auth: authReducer,\n});\n// непосредственно создаём store\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\n// определить автоматически тип всего объекта состояния\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector;\n\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\n// @ts-ignore\nwindow.store = store;\n","import React from \"react\";\nimport Snackbar from \"@mui/material/Snackbar\";\nimport MuiAlert, { AlertProps } from \"@mui/material/Alert\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AppRootStateType } from \"../../../app/store\";\nimport { setAppErrorAC } from \"../../../app/app-reducer\";\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n  props,\n  ref\n) {\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nexport function ErrorSnackbar() {\n  // // const [open, setOpen] = useState(true);\n  const dispatch = useDispatch();\n\n  const error = useSelector<AppRootStateType, string | null>(\n    (state) => state.app.error\n  );\n\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    dispatch(setAppErrorAC(null));\n    // setOpen(false);\n  };\n\n  return (\n    <Snackbar\n      open={error !== null}\n      autoHideDuration={6000}\n      onClose={handleClose}\n    >\n      <Alert onClose={handleClose} severity=\"error\" sx={{ width: \"100%\" }}>\n        {error} 😠\n      </Alert>\n    </Snackbar>\n  );\n}\n","import React from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport FormControl from \"@mui/material/FormControl\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport FormGroup from \"@mui/material/FormGroup\";\nimport FormLabel from \"@mui/material/FormLabel\";\nimport TextField from \"@mui/material/TextField\";\nimport Button from \"@mui/material/Button\";\nimport { useFormik } from \"formik\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { loginTC } from \"./auth-reducer\";\nimport { AppRootStateType } from \"../../app/store\";\nimport { Navigate, useNavigate } from \"react-router-dom\";\nimport { FormikErrorType } from \"../../api/todolist-api\";\n\nexport const Login = () => {\n  const dispatch = useDispatch();\n\n  const navigate = useNavigate(); // * Test hook\n\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(\n    (state) => state.auth.isLoggedIn\n  );\n  const formik = useFormik({\n    initialValues: {\n      email: \"\",\n      password: \"\",\n      rememberMe: false,\n    },\n    validate: (values) => {\n      const errors: Partial<FormikErrorType> = {};\n      if (!values.email) {\n        errors.email = \"Required\";\n      } else if (\n        !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n      ) {\n        errors.email = \"Invalid email address\";\n      }\n      return errors;\n    },\n    onSubmit: (values) => {\n      dispatch(loginTC(values));\n      formik.resetForm();\n    },\n  });\n\n  // formik.setFieldValue('email', 'value')\n\n  // if (isLoggedIn) {\n  //   return <Navigate to={\"/\"} />;\n  // }\n  if (isLoggedIn) navigate(\"/\");\n\n  return (\n    <Grid container justifyContent={\"center\"}>\n      <Grid item justifyContent={\"center\"}>\n        <form onSubmit={formik.handleSubmit}>\n          <FormControl>\n            <FormLabel>\n              <p>\n                To log in get registered\n                <a\n                  href={\"https://social-network.samuraijs.com/\"}\n                  target={\"_blank\"}\n                >\n                  here\n                </a>\n              </p>\n              <p>or use common test account credentials:</p>\n              <p>Email: free@samuraijs.com</p>\n              <p>Password: free</p>\n            </FormLabel>\n            <FormGroup>\n              <TextField\n                label=\"Email\"\n                margin=\"normal\"\n                // name=\"email\"\n                // onChange={formik.handleChange}\n                // value={formik.values.email}\n                // onBlur={formik.handleBlur}\n                {...formik.getFieldProps(\"email\")}\n              />\n              {/*{formik.touched.email && formik.errors.email ? (*/}\n              {/*  <div style={{ color: \"red\" }}>{formik.errors.email}</div>*/}\n              {/*) : null}       */}\n\n              {formik.touched.email && formik.errors.email && (\n                <div style={{ color: \"red\" }}>{formik.errors.email}</div>\n              )}\n              <TextField\n                type=\"password\"\n                label=\"Password\"\n                margin=\"normal\"\n                // name=\"password\"\n                // onChange={formik.handleChange}\n                // value={formik.values.password}\n                // onBlur={formik.handleBlur}\n                {...formik.getFieldProps(\"password\")}\n              />\n              {formik.touched.password && formik.errors.password ? (\n                <div style={{ color: \"red\" }}>{formik.errors.password}</div>\n              ) : null}\n              <FormControlLabel\n                label={\"Remember me\"}\n                control={<Checkbox />}\n                name=\"rememberMe\"\n                onChange={formik.handleChange}\n                value={\"rememberMe\"}\n                checked={formik.values.rememberMe}\n              />\n              <Button type={\"submit\"} variant={\"contained\"} color={\"primary\"}>\n                Login\n              </Button>\n            </FormGroup>\n          </FormControl>\n        </form>\n      </Grid>\n    </Grid>\n  );\n};\n","import React, { useEffect } from \"react\";\nimport styles from \"./App.module.scss\";\nimport { TodolistsList } from \"../features/TodolistsList/TodolistsList\";\nimport Menu from \"@mui/icons-material/Menu\";\nimport LinearProgress from \"@mui/material/LinearProgress\";\nimport AppBar from \"@mui/material/AppBar\";\nimport Button from \"@mui/material/Button\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport Typography from \"@mui/material/Typography\";\nimport Container from \"@mui/material/Container\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport { TaskType } from \"../api/todolist-api\";\nimport { useAppSelector } from \"./store\";\nimport { initializeAppTC, RequestStatusType } from \"./app-reducer\";\nimport { useDispatch } from \"react-redux\";\nimport { ErrorSnackbar } from \"../components/ui/ErrorSnackbar/ErrorSnackbar\";\nimport { Login } from \"../features/Login/Login\";\nimport { Navigate, Route, Routes } from \"react-router-dom\";\nimport { logoutTC } from \"../features/Login/auth-reducer\";\n\nexport type TaskStateType = {\n  [key: string]: Array<TaskType>;\n};\n\nfunction AppWithRedux() {\n  const status = useAppSelector<RequestStatusType>((state) => state.app.status);\n  const isInitialized = useAppSelector<boolean>(\n    (state) => state.app.isInitialized\n  );\n  const isLoggedIn = useAppSelector<boolean>((state) => state.auth.isLoggedIn);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(initializeAppTC());\n  }, []);\n\n  const logoutHandler = () => dispatch(logoutTC());\n\n  if (!isInitialized) {\n    return (\n      <div\n        style={{\n          position: \"fixed\",\n          top: \"30%\",\n          textAlign: \"center\",\n          width: \"100%\",\n        }}\n      >\n        <CircularProgress />\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.App}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n            <Menu />\n          </IconButton>\n          <Typography variant=\"h6\">News</Typography>\n          {isLoggedIn && (\n            <Button color=\"inherit\" onClick={logoutHandler}>\n              Logout\n            </Button>\n          )}\n        </Toolbar>\n      </AppBar>\n\n      {status === \"loading\" && (\n        <LinearProgress color=\"secondary\" sx={{ width: \"100%\" }} />\n      )}\n      <Container fixed>\n        <Routes>\n          <Route path=\"/\" element={<TodolistsList />} />\n          <Route path=\"login\" element={<Login />} />\n          <Route path={\"/404\"} element={<h1>404: Page not found</h1>} />\n          <Route path={\"*\"} element={<Navigate to=\"/404\" />} />\n        </Routes>\n      </Container>\n      <ErrorSnackbar />\n    </div>\n  );\n}\n\nexport default AppWithRedux;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport AppWithRedux from \"./app/AppWithRedux\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./app/store\";\nimport { HashRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <HashRouter>\n      <AppWithRedux />,\n    </HashRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__28txn\",\"error\":\"App_error__k9UEP\",\"error-message\":\"App_error-message__1Qm0Y\",\"is-done\":\"App_is-done__3n4nj\"};"],"sourceRoot":""}